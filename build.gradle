plugins {
    id 'java'
    id 'uk.gov.hmcts.java' version '0.12.63'
    id 'io.gatling.gradle' version '3.11.5.2'
}

group = 'uk.gov.hmcts'
version = '0.0.1'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencyCheck {
    suppressionFile = 'config/owasp/suppressions.xml'
}

dependencies {
    gatling group: 'org.postgresql', name: 'postgresql', version: '42.7.4'
    gatling 'com.github.hmcts:juror-generation-support-library:1.5.4'
}

// Default gatlingRun configuration
gatlingRun {
    simulationClassName = System.getenv("SimulationBlock")
    doFirst {
        println "Running simulation: " + simulationClassName
        def soapUsersCount = System.getenv("SOAP_USERS_COUNT") ?: '1'
        println "Users count: " + soapUsersCount
        System.setProperty("SOAP_USERS_COUNT", soapUsersCount)

        def nightlyRunRepeats = System.getenv("NIGHTLY_RUN_REPEATS") ?: '10'
        println "Number of repeats: " + nightlyRunRepeats
        System.setProperty("NIGHTLY_RUN_REPEATS", nightlyRunRepeats)

        def nightlyRunUsers = System.getenv("NIGHTLY_RUN_USERS") ?: '10'
        println "Users count: " + nightlyRunUsers
        System.setProperty("NIGHTLY_RUN_USERS", nightlyRunUsers)
    }
}


// Task for AudioPostSimulation
tasks.register('runAudioPostSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsApi.AudioPostSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsApi.AudioPostSimulation'
}

// Task for AddCaseUserSimulation
tasks.register('runAddCaseUserSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.NightlyRun.AddCaseUserSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.NightlyRun.AddCaseUserSimulation'
}

// Task for AudioRequestDeleteSimulation
tasks.register('runAudioRequestDeleteSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsApi.AudioRequestDeleteSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsApi.AudioRequestDeleteSimulation'
}

// Task for AudioRequestGetDownloadSimulation
tasks.register('runAudioRequestGetSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsApi.AudioRequestGetSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsApi.AudioRequestGetSimulation'
}
// Task for AudioRequestPostSimulation
tasks.register('runAudioRequestPostSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsApi.AudioRequestPostSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsApi.AudioRequestPostSimulation'
}
// Task for NightlyRunSimulation
tasks.register('runNightlyRunSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.NightlyRun.NightlyRunSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.NightlyRun.NightlyRunSimulation'
}

// Task for CloseCaseSimulation
tasks.register('runCloseCaseSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsApi.CloseCaseSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsApi.CloseCaseSimulation'
}


// Task for CloseOldCasesTaskSimulation
tasks.register('runCloseOldCasesTaskSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsApi.RunCloseOldCasesTaskSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsApi.RunCloseOldCasesTaskSimulation'
}

// Task for CaseRetentionSimulation
tasks.register('runCaseRetentionSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsApi.CaseRetentionSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsApi.CaseRetentionSimulation'
}

// Task for ApplyRetentionTaskSimulation
tasks.register('runApplyRetentionTaskSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsApi.RunApplyRetentionTaskSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsApi.RunApplyRetentionTaskSimulation'
}

// Task for UnstructuredAudioDeleterTaskSimulation
tasks.register('runUnstructuredAudioDeleterTaskSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsApi.RunUnstructuredAudioDeleterTaskSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsApi.RunUnstructuredAudioDeleterTaskSimulation'
}

// Task for RunDailyListTaskSimulation
tasks.register('runDailyListTaskSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsApi.RunDailyListTaskSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsApi.RunDailyListTaskSimulation'
}

// Task for DailyListsSimulation
tasks.register('runDailyListsSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsSoap.DailyListsSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsSoap.DailyListsSimulation'
}

// Task for RunDailyListHouseKeepingTaskSimulation
tasks.register('runDailyListHouseKeepingTaskSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsApi.RunDailyListHouseKeepingTaskSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsApi.RunDailyListHouseKeepingTaskSimulation'
}

// Task for RunDailyListHouseKeepingTaskSimulation
tasks.register('runPortalSmokeTestTwoSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsSmokeTests.PortalSmokeTestTwoSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsSmokeTests.PortalSmokeTestTwoSimulation'
}

// Task for RunCloseOldUnfinishedTranscriptionsSimulation
tasks.register('runCloseOldUnfinishedTranscriptionsSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsApi.RunCloseOldUnfinishedTranscriptionsSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsApi.RunCloseOldUnfinishedTranscriptionsSimulation'
}

// Task for RunGenerateCaseDocumentSimulation
tasks.register('runGenerateCaseDocumentSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsApi.RunGenerateCaseDocumentSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsApi.RunGenerateCaseDocumentSimulation'
}

// Task for RunGenerateCaseDocumentForRetentionDateSimulation
tasks.register('runGenerateCaseDocumentForRetentionDateSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsApi.RunGenerateCaseDocumentForRetentionDateSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsApi.RunGenerateCaseDocumentForRetentionDateSimulation'
}

// Task for RunGenerateCaseDocumentForRetentionDateSimulation
tasks.register('runAddDocumentsSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsSoap.AddDocumentsSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsSoap.AddDocumentsSimulation'
}

// Task for RunRemoveDuplicateEventsSimulation
tasks.register('runRemoveDuplicateEventsSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsApi.RunRemoveDuplicateEventsSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsApi.RunRemoveDuplicateEventsSimulation'
}

// Task for RunCaseExpiryDeletionSimulation
tasks.register('runCaseExpiryDeletionSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsApi.RunCaseExpiryDeletionSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsApi.RunCaseExpiryDeletionSimulation'
}

// Task for RunInboundToUnstructuredDataStoreSimulation
tasks.register('runInboundToUnstructuredDataStoreSimulation') {
    doLast {
        println "Running simulation: simulations.Scripts.DartsApi.RunInboundToUnstructuredDataStoreSimulation"
    }
    // Set the simulation class and make this task depend on gatlingRun
    finalizedBy(gatlingRun) // Ensure gatlingRun executes after this task
    gatlingRun.simulationClassName = 'simulations.Scripts.DartsApi.RunInboundToUnstructuredDataStoreSimulation'
}

checkstyleGatling {
    maxWarnings = 3035
}

tasks.register('runAllStyleChecks') {
    dependsOn 'checkstyleMain'
    dependsOn 'checkstyleTest'
    dependsOn 'checkstyleGatling'
}