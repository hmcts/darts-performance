<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Blazemeter test plan" enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.3.1.23. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SCRIPT_NAME" elementType="Argument">
            <stringProp name="Argument.name">SCRIPT_NAME</stringProp>
            <stringProp name="Argument.value">${__P(SCRIPT_NAME, API-CreateTranscriptions-Post)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL</stringProp>
            <stringProp name="Argument.value">${__P(BASE_URL, darts-api.test.platform.hmcts.net)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_LOGIN" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_LOGIN</stringProp>
            <stringProp name="Argument.value">${__GetSecret(BASE_URL_LOGIN)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_TOKEN</stringProp>
            <stringProp name="Argument.value">${__GetSecret(BASE_URL_TOKEN)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_DATA" elementType="Argument">
            <stringProp name="Argument.name">TEST_DATA</stringProp>
            <stringProp name="Argument.value">${__GetSecret(TEST_DATA)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_COUNT" elementType="Argument">
            <stringProp name="Argument.name">USER_COUNT</stringProp>
            <stringProp name="Argument.value">${__P(USER_COUNT, 30)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_RAMP_TIME" elementType="Argument">
            <stringProp name="Argument.name">USER_RAMP_TIME</stringProp>
            <stringProp name="Argument.value">${__P(USER_RAMP_TIME, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_ITERATIONS" elementType="Argument">
            <stringProp name="Argument.name">USER_ITERATIONS</stringProp>
            <stringProp name="Argument.value">${__P(USER_ITERATIONS, 1000000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TENANT_ID" elementType="Argument">
            <stringProp name="Argument.name">TENANT_ID</stringProp>
            <stringProp name="Argument.value">${__GetSecret(TENANT_ID)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CLIENT_ID" elementType="Argument">
            <stringProp name="Argument.name">CLIENT_ID</stringProp>
            <stringProp name="Argument.value">${__GetSecret(CLIENT_ID)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CLIENT_SECRET" elementType="Argument">
            <stringProp name="Argument.name">CLIENT_SECRET</stringProp>
            <stringProp name="Argument.value">${__GetSecret(CLIENT_SECRET)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SCOPE" elementType="Argument">
            <stringProp name="Argument.name">SCOPE</stringProp>
            <stringProp name="Argument.value">${__GetSecret(SCOPE)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERNAME" elementType="Argument">
            <stringProp name="Argument.name">USERNAME</stringProp>
            <stringProp name="Argument.value">${__P(USERNAME, darts_global_test_user)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERNAME2" elementType="Argument">
            <stringProp name="Argument.name">USERNAME2</stringProp>
            <stringProp name="Argument.value">${__P(USERNAME2, PerfTranscirber02@hmcts.net)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERNAME3" elementType="Argument">
            <stringProp name="Argument.name">USERNAME3</stringProp>
            <stringProp name="Argument.value">${__P(USERNAME3, PerfCourtClerk02@hmcts.net)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD</stringProp>
            <stringProp name="Argument.value">${__GetSecret(PASSWORD)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD2" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD2</stringProp>
            <stringProp name="Argument.value">${__P(PASSWORD2, PerfTester@01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD3" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD3</stringProp>
            <stringProp name="Argument.value">${__P(PASSWORD3, PerfTester@01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GRANT_TYPE" elementType="Argument">
            <stringProp name="Argument.name">GRANT_TYPE</stringProp>
            <stringProp name="Argument.value">${__GetSecret(GRANT_TYPE)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FILE_TO_UPLOAD1mb" elementType="Argument">
            <stringProp name="Argument.name">FILE_TO_UPLOAD1mb</stringProp>
            <stringProp name="Argument.value">${__P(FILE_TO_UPLOAD, sample.mp2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FILE_TO_UPLOAD28mb" elementType="Argument">
            <stringProp name="Argument.name">FILE_TO_UPLOAD28mb</stringProp>
            <stringProp name="Argument.value">${__P(FILE_TO_UPLOAD, 02h.mp2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FILE_TO_UPLOAD168mb" elementType="Argument">
            <stringProp name="Argument.name">FILE_TO_UPLOAD168mb</stringProp>
            <stringProp name="Argument.value">${__P(FILE_TO_UPLOAD, 12h.mp2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FILE_TO_UPLOAD213mb" elementType="Argument">
            <stringProp name="Argument.name">FILE_TO_UPLOAD213mb</stringProp>
            <stringProp name="Argument.value">${__P(FILE_TO_UPLOAD, 15h 15m.mp2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FILE_TO_UPLOAD336mb" elementType="Argument">
            <stringProp name="Argument.name">FILE_TO_UPLOAD336mb</stringProp>
            <stringProp name="Argument.value">${__P(FILE_TO_UPLOAD, 24h.mp2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="project" elementType="Argument">
            <stringProp name="Argument.name">project</stringProp>
            <stringProp name="Argument.value">_PROJECT_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="suite" elementType="Argument">
            <stringProp name="Argument.name">suite</stringProp>
            <stringProp name="Argument.value">_SUITE_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="build" elementType="Argument">
            <stringProp name="Argument.name">build</stringProp>
            <stringProp name="Argument.value">_BUILDNUMBER_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="agent" elementType="Argument">
            <stringProp name="Argument.name">agent</stringProp>
            <stringProp name="Argument.value">${__machineIP()}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <com.github.johrstrom.listener.PrometheusListener guiclass="com.github.johrstrom.listener.gui.PrometheusListenerGui" testclass="com.github.johrstrom.listener.PrometheusListener" testname="Prometheus Listener" enabled="false">
        <collectionProp name="prometheus.collector_definitions">
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">the response time for a jsr223 sampler</stringProp>
            <stringProp name="collector.metric_name">jsr223_rt_as_hist</stringProp>
            <stringProp name="collector.type">HISTOGRAM</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="-309310695">project</stringProp>
              <stringProp name="109795064">suite</stringProp>
              <stringProp name="94094958">build</stringProp>
              <stringProp name="92750597">agent</stringProp>
              <stringProp name="102727412">label</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">100,500,1000,3000</stringProp>
            <stringProp name="listener.collector.measuring">ResponseTime</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">the response time for a jsr223 sampler</stringProp>
            <stringProp name="collector.metric_name">jsr223_rt_as_summary</stringProp>
            <stringProp name="collector.type">SUMMARY</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="-309310695">project</stringProp>
              <stringProp name="109795064">suite</stringProp>
              <stringProp name="94094958">build</stringProp>
              <stringProp name="92750597">agent</stringProp>
              <stringProp name="102727412">label</stringProp>
              <stringProp name="3059181">code</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">0.75,0.5|0.95,0.1|0.99,0.01</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">the total number of samplers</stringProp>
            <stringProp name="collector.metric_name">jsr223_count_total</stringProp>
            <stringProp name="collector.type">COUNTER</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="-309310695">project</stringProp>
              <stringProp name="109795064">suite</stringProp>
              <stringProp name="94094958">build</stringProp>
              <stringProp name="92750597">agent</stringProp>
              <stringProp name="102727412">label</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets"></stringProp>
            <stringProp name="listener.collector.measuring">CountTotal</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">the total number of successful samplers</stringProp>
            <stringProp name="collector.metric_name">jsr223_success_total</stringProp>
            <stringProp name="collector.type">COUNTER</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="-309310695">project</stringProp>
              <stringProp name="109795064">suite</stringProp>
              <stringProp name="94094958">build</stringProp>
              <stringProp name="92750597">agent</stringProp>
              <stringProp name="102727412">label</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets"></stringProp>
            <stringProp name="listener.collector.measuring">SuccessTotal</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">the response size for a jsr223 sampler</stringProp>
            <stringProp name="collector.metric_name">jsr223_rsize_as_hist</stringProp>
            <stringProp name="collector.type">HISTOGRAM</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="-309310695">project</stringProp>
              <stringProp name="109795064">suite</stringProp>
              <stringProp name="94094958">build</stringProp>
              <stringProp name="92750597">agent</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">100,500,1000,3000</stringProp>
            <stringProp name="listener.collector.measuring">ResponseSize</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">success ratio of the can_fail_sampler</stringProp>
            <stringProp name="collector.metric_name">jsr223_can_fail</stringProp>
            <stringProp name="collector.type">SUCCESS_RATIO</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="-309310695">project</stringProp>
              <stringProp name="109795064">suite</stringProp>
              <stringProp name="94094958">build</stringProp>
              <stringProp name="92750597">agent</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets"></stringProp>
            <stringProp name="listener.collector.measuring">SuccessRatio</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">the latency (ttfb) for a jsr223 sampler</stringProp>
            <stringProp name="collector.metric_name">jsr223_latency_as_hist</stringProp>
            <stringProp name="collector.type">HISTOGRAM</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="-309310695">project</stringProp>
              <stringProp name="109795064">suite</stringProp>
              <stringProp name="94094958">build</stringProp>
              <stringProp name="92750597">agent</stringProp>
              <stringProp name="102727412">label</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">100,500,1000,3000</stringProp>
            <stringProp name="listener.collector.measuring">Latency</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">the idle time for a jsr223 sampler</stringProp>
            <stringProp name="collector.metric_name">jsr223_idle_time</stringProp>
            <stringProp name="collector.type">SUMMARY</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="-309310695">project</stringProp>
              <stringProp name="109795064">suite</stringProp>
              <stringProp name="94094958">build</stringProp>
              <stringProp name="92750597">agent</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">0.75,0.5|0.95,0.1|0.99,0.01</stringProp>
            <stringProp name="listener.collector.measuring">IdleTime</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">default help string</stringProp>
            <stringProp name="collector.metric_name">jsr223_assertions</stringProp>
            <stringProp name="collector.type">SUCCESS_RATIO</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="-309310695">project</stringProp>
              <stringProp name="109795064">suite</stringProp>
              <stringProp name="94094958">build</stringProp>
              <stringProp name="92750597">agent</stringProp>
              <stringProp name="102727412">label</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets"></stringProp>
            <stringProp name="listener.collector.measuring">SuccessRatio</stringProp>
            <stringProp name="listener.collector.listen_to">assertions</stringProp>
          </elementProp>
        </collectionProp>
      </com.github.johrstrom.listener.PrometheusListener>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV - Users" enabled="false">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${TEST_DATA}users_${__machineIP}.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames"></stringProp>
        <stringProp name="TestPlan.comments">${TEST_DATA}users_${__machineIP}.csv</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV - CourtRoomAndCourtHouses.csv" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${TEST_DATA}GetAllCourtroomsAndCourthouses2.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames"></stringProp>
        <stringProp name="TestPlan.comments">${TEST_DATA}users_${__machineIP}.csv</stringProp>
      </CSVDataSet>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TG - test1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="B2C_1_ropc_darts_signin/oauth2/v2.0/token" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">grant_type=${GRANT_TYPE}&amp;client_id=${CLIENT_ID}&amp;client_secret=${CLIENT_SECRET}&amp;scope=${SCOPE}&amp;username=${USERNAME}&amp;password=${PASSWORD}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_LOGIN}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL_TOKEN}/B2C_1_ropc_darts_signin/oauth2/v2.0/token</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Host" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${BASE_URL_LOGIN}</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">277</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Access Token" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">ex_accessToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">300</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="B2C_1_ropc_darts_signin/oauth2/v2.0/token" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">grant_type=${GRANT_TYPE}&amp;client_id=${CLIENT_ID}&amp;client_secret=${CLIENT_SECRET}&amp;scope=${SCOPE}&amp;username=${USERNAME2}&amp;password=${PASSWORD2}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_LOGIN}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL_TOKEN}/B2C_1_ropc_darts_signin/oauth2/v2.0/token</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Host" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${BASE_URL_LOGIN}</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">277</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Access Token Trans" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">ex_accessTokenTrans</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="B2C_1_ropc_darts_signin/oauth2/v2.0/token" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">grant_type=${GRANT_TYPE}&amp;client_id=${CLIENT_ID}&amp;client_secret=${CLIENT_SECRET}&amp;scope=${SCOPE}&amp;username=${USERNAME3}&amp;password=${PASSWORD3}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_LOGIN}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL_TOKEN}/B2C_1_ropc_darts_signin/oauth2/v2.0/token</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Host" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${BASE_URL_LOGIN}</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">277</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Access Token Trans" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">ex_accessTokenTrans</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="94232475">v_randomEventText</stringProp>
            <stringProp name="-1564979469">v_randomFileName</stringProp>
            <stringProp name="-342927303">v_randomTranscriptionComment</stringProp>
            <stringProp name="169510212">v_dateTime</stringProp>
            <stringProp name="94049529">v_randomEventName</stringProp>
            <stringProp name="1506241289">v_randomEventId</stringProp>
            <stringProp name="-808133977">v_randomCaseName</stringProp>
            <stringProp name="-181499217">v_randomDefender</stringProp>
            <stringProp name="-1602782773">v_randomJudge</stringProp>
            <stringProp name="-624884974">v_randomProsecutor</stringProp>
            <stringProp name="-1331508381">v_randomDefender2</stringProp>
            <stringProp name="1791439238">v_randomNumberForEvent</stringProp>
            <stringProp name="-628525754">audioCounter</stringProp>
            <stringProp name="1921384329">v_randomNumberRetention</stringProp>
            <stringProp name="-1471382400">v_randomNumberEventId</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1918917400">
              <stringProp name="-1161236289">${__RandomString(5,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="-1161236289">${__RandomString(5,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="-1161236289">${__RandomString(5,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="-1326369593">${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&apos;Z&apos;,)}</stringProp>
              <stringProp name="487930620">${__Random(1001,1007,)}</stringProp>
              <stringProp name="1642584799">${__Random(1,1070,)}</stringProp>
              <stringProp name="1974593924">${__RandomString(11,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="-1161236289">${__RandomString(5,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="-1161236289">${__RandomString(5,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="-1161236289">${__RandomString(5,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="-1161236289">${__RandomString(5,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="1512311384">${__Random(1,10,)}</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="-1198056235">${__Random(1,4,)}</stringProp>
              <stringProp name="1636120152">${__Random(1,1000,)}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
