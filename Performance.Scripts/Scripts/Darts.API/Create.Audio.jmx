<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="${SCRIPT_NAME}" enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.3.1.23. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SCRIPT_NAME" elementType="Argument">
            <stringProp name="Argument.name">SCRIPT_NAME</stringProp>
            <stringProp name="Argument.value">${__P(SCRIPT_NAME, API-CreateAudio-Post)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL</stringProp>
            <stringProp name="Argument.value">${__GetSecret(BASE_URL)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_LOGIN" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_LOGIN</stringProp>
            <stringProp name="Argument.value">${__GetSecret(BASE_URL_LOGIN)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_TOKEN</stringProp>
            <stringProp name="Argument.value">${__GetSecret(BASE_URL_TOKEN)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_DATA" elementType="Argument">
            <stringProp name="Argument.name">TEST_DATA</stringProp>
            <stringProp name="Argument.value">${__GetSecret(TEST_DATA)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_COUNT" elementType="Argument">
            <stringProp name="Argument.name">USER_COUNT</stringProp>
            <stringProp name="Argument.value">${__P(USER_COUNT, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_RAMP_TIME" elementType="Argument">
            <stringProp name="Argument.name">USER_RAMP_TIME</stringProp>
            <stringProp name="Argument.value">${__P(USER_RAMP_TIME, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_ITERATIONS" elementType="Argument">
            <stringProp name="Argument.name">USER_ITERATIONS</stringProp>
            <stringProp name="Argument.value">${__P(USER_ITERATIONS, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FILE_TO_UPLOAD" elementType="Argument">
            <stringProp name="Argument.name">FILE_TO_UPLOAD</stringProp>
            <stringProp name="Argument.value">${__P(FILE_TO_UPLOAD, sample.mp2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TENANT_ID" elementType="Argument">
            <stringProp name="Argument.name">TENANT_ID</stringProp>
            <stringProp name="Argument.value">${__GetSecret(TENANT_ID)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CLIENT_ID" elementType="Argument">
            <stringProp name="Argument.name">CLIENT_ID</stringProp>
            <stringProp name="Argument.value">${__GetSecret(CLIENT_ID)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CLIENT_SECRET" elementType="Argument">
            <stringProp name="Argument.name">CLIENT_SECRET</stringProp>
            <stringProp name="Argument.value">${__GetSecret(CLIENT_SECRET)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SCOPE" elementType="Argument">
            <stringProp name="Argument.name">SCOPE</stringProp>
            <stringProp name="Argument.value">${__GetSecret(SCOPE)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERNAME" elementType="Argument">
            <stringProp name="Argument.name">USERNAME</stringProp>
            <stringProp name="Argument.value">${__GetSecret(USERNAME)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD</stringProp>
            <stringProp name="Argument.value">${__GetSecret(PASSWORD)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GRANT_TYPE" elementType="Argument">
            <stringProp name="Argument.name">GRANT_TYPE</stringProp>
            <stringProp name="Argument.value">${__GetSecret(GRANT_TYPE)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="project" elementType="Argument">
            <stringProp name="Argument.name">project</stringProp>
            <stringProp name="Argument.value">_PROJECT_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="suite" elementType="Argument">
            <stringProp name="Argument.name">suite</stringProp>
            <stringProp name="Argument.value">_SUITE_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="build" elementType="Argument">
            <stringProp name="Argument.name">build</stringProp>
            <stringProp name="Argument.value">_BUILDNUMBER_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FILE_TO_UPLOAD336mb" elementType="Argument">
            <stringProp name="Argument.name">FILE_TO_UPLOAD336mb</stringProp>
            <stringProp name="Argument.value">${__P(FILE_TO_UPLOAD, 24h.mp2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <com.github.johrstrom.listener.PrometheusListener guiclass="com.github.johrstrom.listener.gui.PrometheusListenerGui" testclass="com.github.johrstrom.listener.PrometheusListener" testname="Prometheus Listener" enabled="false">
        <collectionProp name="prometheus.collector_definitions">
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">the response time for a jsr223 sampler</stringProp>
            <stringProp name="collector.metric_name">jsr223_rt_as_hist</stringProp>
            <stringProp name="collector.type">HISTOGRAM</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="-309310695">project</stringProp>
              <stringProp name="109795064">suite</stringProp>
              <stringProp name="94094958">build</stringProp>
              <stringProp name="92750597">agent</stringProp>
              <stringProp name="102727412">label</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">100,500,1000,3000</stringProp>
            <stringProp name="listener.collector.measuring">ResponseTime</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">the response time for a jsr223 sampler</stringProp>
            <stringProp name="collector.metric_name">jsr223_rt_as_summary</stringProp>
            <stringProp name="collector.type">SUMMARY</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="-309310695">project</stringProp>
              <stringProp name="109795064">suite</stringProp>
              <stringProp name="94094958">build</stringProp>
              <stringProp name="92750597">agent</stringProp>
              <stringProp name="102727412">label</stringProp>
              <stringProp name="3059181">code</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">0.75,0.5|0.95,0.1|0.99,0.01</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">the total number of samplers</stringProp>
            <stringProp name="collector.metric_name">jsr223_count_total</stringProp>
            <stringProp name="collector.type">COUNTER</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="-309310695">project</stringProp>
              <stringProp name="109795064">suite</stringProp>
              <stringProp name="94094958">build</stringProp>
              <stringProp name="92750597">agent</stringProp>
              <stringProp name="102727412">label</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets"></stringProp>
            <stringProp name="listener.collector.measuring">CountTotal</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">the total number of successful samplers</stringProp>
            <stringProp name="collector.metric_name">jsr223_success_total</stringProp>
            <stringProp name="collector.type">COUNTER</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="-309310695">project</stringProp>
              <stringProp name="109795064">suite</stringProp>
              <stringProp name="94094958">build</stringProp>
              <stringProp name="92750597">agent</stringProp>
              <stringProp name="102727412">label</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets"></stringProp>
            <stringProp name="listener.collector.measuring">SuccessTotal</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">the response size for a jsr223 sampler</stringProp>
            <stringProp name="collector.metric_name">jsr223_rsize_as_hist</stringProp>
            <stringProp name="collector.type">HISTOGRAM</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="-309310695">project</stringProp>
              <stringProp name="109795064">suite</stringProp>
              <stringProp name="94094958">build</stringProp>
              <stringProp name="92750597">agent</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">100,500,1000,3000</stringProp>
            <stringProp name="listener.collector.measuring">ResponseSize</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">success ratio of the can_fail_sampler</stringProp>
            <stringProp name="collector.metric_name">jsr223_can_fail</stringProp>
            <stringProp name="collector.type">SUCCESS_RATIO</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="-309310695">project</stringProp>
              <stringProp name="109795064">suite</stringProp>
              <stringProp name="94094958">build</stringProp>
              <stringProp name="92750597">agent</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets"></stringProp>
            <stringProp name="listener.collector.measuring">SuccessRatio</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">the latency (ttfb) for a jsr223 sampler</stringProp>
            <stringProp name="collector.metric_name">jsr223_latency_as_hist</stringProp>
            <stringProp name="collector.type">HISTOGRAM</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="-309310695">project</stringProp>
              <stringProp name="109795064">suite</stringProp>
              <stringProp name="94094958">build</stringProp>
              <stringProp name="92750597">agent</stringProp>
              <stringProp name="102727412">label</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">100,500,1000,3000</stringProp>
            <stringProp name="listener.collector.measuring">Latency</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">the idle time for a jsr223 sampler</stringProp>
            <stringProp name="collector.metric_name">jsr223_idle_time</stringProp>
            <stringProp name="collector.type">SUMMARY</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="-309310695">project</stringProp>
              <stringProp name="109795064">suite</stringProp>
              <stringProp name="94094958">build</stringProp>
              <stringProp name="92750597">agent</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">0.75,0.5|0.95,0.1|0.99,0.01</stringProp>
            <stringProp name="listener.collector.measuring">IdleTime</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">default help string</stringProp>
            <stringProp name="collector.metric_name">jsr223_assertions</stringProp>
            <stringProp name="collector.type">SUCCESS_RATIO</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="-309310695">project</stringProp>
              <stringProp name="109795064">suite</stringProp>
              <stringProp name="94094958">build</stringProp>
              <stringProp name="92750597">agent</stringProp>
              <stringProp name="102727412">label</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets"></stringProp>
            <stringProp name="listener.collector.measuring">SuccessRatio</stringProp>
            <stringProp name="listener.collector.listen_to">assertions</stringProp>
          </elementProp>
        </collectionProp>
      </com.github.johrstrom.listener.PrometheusListener>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV - Users" enabled="false">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${TEST_DATA}users_${__machineIP}.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames"></stringProp>
        <stringProp name="TestPlan.comments">${TEST_DATA}users_${__machineIP}.csv</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV - CourtRoomAndCourtHouses.csv" enabled="false">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${TEST_DATA}CourtRoomAndCourtHouses.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames"></stringProp>
        <stringProp name="TestPlan.comments">${TEST_DATA}users_${__machineIP}.csv</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV - AudioFormat.csv" enabled="false">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${TEST_DATA}AudioFormat.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames"></stringProp>
        <stringProp name="TestPlan.comments">${TEST_DATA}users_${__machineIP}.csv</stringProp>
      </CSVDataSet>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.proxyHost">127.0.0.1</stringProp>
        <stringProp name="HTTPSampler.proxyPort">8888</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TG - ${SCRIPT_NAME}" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${USER_ITERATIONS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${USER_COUNT}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${USER_RAMP_TIME}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">dbConfig</stringProp>
          <stringProp name="dbUrl">jdbc:postgresql://darts-api-stg.postgres.database.azure.com:5432/darts</stringProp>
          <stringProp name="driver">org.postgresql.Driver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">PQuEyVaUAxqu0UeNUo8(</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">pgadmin</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Date Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="94232475">v_randomEventText</stringProp>
            <stringProp name="-1564979469">v_randomFileName</stringProp>
            <stringProp name="-808133977">v_randomCaseName</stringProp>
            <stringProp name="-181499217">v_randomDefender</stringProp>
            <stringProp name="-1602782773">v_randomJudge</stringProp>
            <stringProp name="-624884974">v_randomProsecutor</stringProp>
            <stringProp name="-1331508381">v_randomDefender2</stringProp>
            <stringProp name="94049529">v_randomEventName</stringProp>
            <stringProp name="1506241289">v_randomEventId</stringProp>
            <stringProp name="-1579351719">v_randomdates</stringProp>
            <stringProp name="169510212">v_dateTime</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-475164835">
              <stringProp name="-1161236289">${__RandomString(5,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="-1161236289">${__RandomString(5,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="1623793987">${__RandomString(10,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="-1161236289">${__RandomString(5,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="-1161236289">${__RandomString(5,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="-1161236289">${__RandomString(5,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="-1161236289">${__RandomString(5,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="487930620">${__Random(1001,1007,)}</stringProp>
              <stringProp name="1642584799">${__Random(1,1070,)}</stringProp>
              <stringProp name="1723739275">${__groovy(new Date((long)(Math.random() * System.currentTimeMillis())).format(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;),)}</stringProp>
              <stringProp name="-1326369593">${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS&apos;Z&apos;,)}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell - Update randomdates to have 1hour added" enabled="false">
          <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.Date;

String dateString = vars.get(&quot;v_randomdates&quot;);
SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;);
Date date = sdf.parse(dateString);
date.setTime(date.getTime() + 3600 * 1000);  // Adding one hour
vars.put(&quot;v_randomdates1hour&quot;, sdf.format(date));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell - Update randomdates For Audio" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;

// Get the original random date
String originalDate = vars.get(&quot;v_randomdates&quot;);

// Format and save it as audiodates
SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;);
Date date = sdf.parse(originalDate);

// Create a Calendar instance and set it to the original date
Calendar calendar = Calendar.getInstance();
calendar.setTime(date);

// Generate a random time within a day (24 hours)
Random random = new Random();
int randomHour = random.nextInt(24);
int randomMinute = random.nextInt(60);
int randomSecond = random.nextInt(60);

// Set the random time on the existing date
calendar.set(Calendar.HOUR_OF_DAY, randomHour);
calendar.set(Calendar.MINUTE, randomMinute);
calendar.set(Calendar.SECOND, randomSecond);

// Save the formatted date with the random time as audiodates
vars.put(&quot;v_audiodates&quot;, sdf.format(calendar.getTime()));

// Add one hour and save it as audiodates1hour
calendar.add(Calendar.HOUR, 1);
vars.put(&quot;v_audiodates1hour&quot;, sdf.format(calendar.getTime()));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="IC - Get Auth Token for Api" enabled="true">
          <stringProp name="IncludeController.includepath">Test.Fragment.Get.Auth.Token.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DARTS - Api - POST - Events" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;message_id&quot;: &quot;667&quot;,&#xd;
  &quot;type&quot;: &quot;1000&quot;,&#xd;
  &quot;sub_type&quot;: &quot;${v_randomEventName}&quot;,&#xd;
  &quot;event_id&quot;: &quot;668&quot;,&#xd;
  &quot;courthouse&quot;: &quot;PerfCourtHouse01&quot;,&#xd;
  &quot;courtroom&quot;: &quot;PerfCourtroom01&quot;,&#xd;
  &quot;case_numbers&quot;: [&#xd;
    &quot;PerfCase_${v_randomCaseName}&quot;&#xd;
  ],&#xd;
  &quot;event_text&quot;: &quot;PerfEvent_${v_randomEventText}&quot;,&#xd;
  &quot;date_time&quot;: &quot;${v_randomdates}&quot;,&#xd;
  &quot;retention_policy&quot;: {&#xd;
    &quot;case_retention_fixed_policy&quot;: &quot;1&quot;,&#xd;
    &quot;case_total_sentence&quot;: &quot;1&quot;&#xd;
  },&#xd;
  &quot;start_time&quot;: &quot;${v_randomdates}&quot;,&#xd;
  &quot;end_time&quot;: &quot;${v_randomdates1hour}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">events</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Host" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${BASE_URL}</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">453</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua</stringProp>
                <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;119&quot;, &quot;Chromium&quot;;v=&quot;119&quot;, &quot;Not?A_Brand&quot;;v=&quot;24&quot;</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-mobile" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                <stringProp name="Header.value">?0</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${ex_accessToken}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="x-dtpc" elementType="Header">
                <stringProp name="Header.name">x-dtpc</stringProp>
                <stringProp name="Header.value">2$251157096_623h23vLOOCWVUADSUJAKHUHHPSHFCAPEFKIGUQ-0e0</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-platform" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://${BASE_URL}</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${BASE_URL}/swagger-ui/index.html</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="RandomTimer.range">0.0</stringProp>
            <stringProp name="ConstantTimer.delay">0.0</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request For Hearing Id" enabled="false">
          <stringProp name="dataSource">dbConfig</stringProp>
          <stringProp name="query">SELECT darts.hearing.hea_id, darts.hearing.cas_id, darts.hearing.ctr_id, court_case.case_number
FROM darts.hearing
INNER JOIN
    darts.court_case ON darts.hearing.cas_id = darts.court_case.cas_id
WHERE court_case.case_number = &apos;PerfCase_${v_randomCaseName}&apos;
ORDER BY hea_id ASC</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as Object</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">ex_allHearingsIds</stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="TestPlan.comments">where cas_id = 10817</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Hearings Ids" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ex_hearingsIds</stringProp>
            <stringProp name="RegexExtractor.regex">\d+</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Scope.variable"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Hearings Ids" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ex_hearingsIds</stringProp>
            <stringProp name="RegexExtractor.regex">hea_id=(\d+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Scope.variable">ex_allHearingsIds</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Case Ids" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ex_caseIds</stringProp>
            <stringProp name="RegexExtractor.regex">cas_id=(\d+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Scope.variable">ex_allHearingsIds</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract CourtRoom Ids" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ex_courtRoomIds</stringProp>
            <stringProp name="RegexExtractor.regex">ctr_id=(\d+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Scope.variable">ex_allHearingsIds</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request For Adding Audio" enabled="false">
          <stringProp name="dataSource">dbConfig</stringProp>
          <stringProp name="query">insert into darts.media (med_id, ctr_id, media_object_id, channel, total_channels, reference_id, start_ts, end_ts, case_number, version_label, created_ts, created_by, last_modified_ts, last_modified_by, media_file, media_format, file_size)
values  (nextval(&apos;darts.med_seq&apos;), &apos;${ex_courtRoomIds_1}&apos;, null, 1, 1, null, &apos;2023-11-14 14:00:00.000000 +00:00&apos;, &apos;2023-11-14 14:01:00.000000 +00:00&apos;, null, null, null, null, CURRENT_TIMESTAMP, null, &apos;audio_day1_a&apos;, &apos;MP2&apos;, 1000);
 
insert into darts.external_object_directory (eod_id, med_id, trd_id, ado_id, ods_id, elt_id, external_location, checksum, transfer_attempts, created_ts, last_modified_ts, last_modified_by, created_by)
values  (nextval(&apos;darts.eod_seq&apos;), currval(&apos;darts.med_seq&apos;), null, null, 2, 2, &apos;a83afb42-9671-475e-a380-4b46634a1f41&apos;, null, null, &apos;2023-11-14 14:00:00.000000 +00:00&apos;, &apos;2023-11-14 14:01:00.000000 +00:00&apos;, -34, -34);
 
insert into darts.hearing_media_ae (hea_id, med_id)
values  (&apos;${ex_hearingsIds_1}&apos;, currval(&apos;darts.med_seq&apos;));</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as Object</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">ex_addAudio</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction - Create Audio for Transcription" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random Controller" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </RandomController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Darts - Api - POST - Audio - 1mb" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="${TEST_DATA}${FILE_TO_UPLOAD}" elementType="HTTPFileArg">
                    <stringProp name="File.path">${TEST_DATA}${FILE_TO_UPLOAD}</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">audio/mpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="metadata" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">metadata</stringProp>
                    <stringProp name="Argument.value"> {    &quot;started_at&quot;: &quot;${v_audiodates}&quot;,    &quot;ended_at&quot;: &quot;${v_audiodates1hour}&quot;,    &quot;channel&quot;: 1,    &quot;total_channels&quot;: 4,    &quot;format&quot;: &quot;mp2&quot;,    &quot;filename&quot;: &quot;sample.mp2&quot;,    &quot;courthouse&quot;: &quot;PerfCourtHouse04&quot;,    &quot;courtroom&quot;: &quot;PerfCourtroom01&quot;,    &quot;file_size&quot;: 937.96,    &quot;checksum&quot;: &quot;TVRMwq16b4mcZwPSlZj/iQ==&quot;,    &quot;cases&quot;: [      &quot;PerfCase_${v_randomCaseName}&quot;    ]  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="HTTPArgument.content_type">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">audios</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">${audioCounter}</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${ex_accessToken}</stringProp>
                  </elementProp>
                  <elementProp name="x-dtpc" elementType="Header">
                    <stringProp name="Header.name">x-dtpc</stringProp>
                    <stringProp name="Header.value">4$261474838_978h17vTCFUIAKFURHHRNPPCOHSKQRRHRBMNCRU-0e0</stringProp>
                  </elementProp>
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">1500</stringProp>
                <stringProp name="ConstantTimer.delay">1500</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Darts - Api - POST - Audio - 28mb" enabled="false">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="${TEST_DATA}${FILE_TO_UPLOAD28mb}" elementType="HTTPFileArg">
                    <stringProp name="File.path">${TEST_DATA}${FILE_TO_UPLOAD28mb}</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">audio/mpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="metadata" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">metadata</stringProp>
                    <stringProp name="Argument.value"> {    &quot;started_at&quot;: &quot;${v_audiodates}&quot;,    &quot;ended_at&quot;: &quot;${v_audiodates1hour}&quot;,    &quot;channel&quot;: ${audioCounter},    &quot;total_channels&quot;: 4,    &quot;format&quot;: &quot;mp2&quot;,    &quot;filename&quot;: &quot;02h.mp2&quot;,    &quot;courthouse&quot;: &quot;PerfCourtHouse01&quot;,    &quot;courtroom&quot;: &quot;PerfCourtroom01&quot;,    &quot;file_size&quot;: 27.994,    &quot;checksum&quot;: &quot;TVRMwq16b4mcZwPSlZj/iQ==&quot;,    &quot;cases&quot;: [      &quot;PerfCase_${v_randomCaseName}&quot;    ]  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="HTTPArgument.content_type">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">audios</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${ex_accessToken}</stringProp>
                  </elementProp>
                  <elementProp name="x-dtpc" elementType="Header">
                    <stringProp name="Header.name">x-dtpc</stringProp>
                    <stringProp name="Header.value">4$261474838_978h17vTCFUIAKFURHHRNPPCOHSKQRRHRBMNCRU-0e0</stringProp>
                  </elementProp>
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Darts - Api - POST - Audio - 168mb" enabled="false">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="${TEST_DATA}${FILE_TO_UPLOAD168mb}" elementType="HTTPFileArg">
                    <stringProp name="File.path">${TEST_DATA}${FILE_TO_UPLOAD168mb}</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">audio/mpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="metadata" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">metadata</stringProp>
                    <stringProp name="Argument.value"> {    &quot;started_at&quot;: &quot;${v_audiodates}&quot;,    &quot;ended_at&quot;: &quot;${v_audiodates1hour}&quot;,    &quot;channel&quot;: ${audioCounter},    &quot;total_channels&quot;: 4,    &quot;format&quot;: &quot;mp2&quot;,    &quot;filename&quot;: &quot;12h.mp2&quot;,    &quot;courthouse&quot;: &quot;PerfCourtHouse01&quot;,    &quot;courtroom&quot;: &quot;PerfCourtroom01&quot;,    &quot;file_size&quot;: 167.960,    &quot;checksum&quot;: &quot;TVRMwq16b4mcZwPSlZj/iQ==&quot;,    &quot;cases&quot;: [      &quot;PerfCase_${v_randomCaseName}&quot;    ]  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="HTTPArgument.content_type">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">audios</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${ex_accessToken}</stringProp>
                  </elementProp>
                  <elementProp name="x-dtpc" elementType="Header">
                    <stringProp name="Header.name">x-dtpc</stringProp>
                    <stringProp name="Header.value">4$261474838_978h17vTCFUIAKFURHHRNPPCOHSKQRRHRBMNCRU-0e0</stringProp>
                  </elementProp>
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Darts - Api - POST - Audio - 213mb" enabled="false">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="${TEST_DATA}${FILE_TO_UPLOAD213mb}" elementType="HTTPFileArg">
                    <stringProp name="File.path">${TEST_DATA}${FILE_TO_UPLOAD213mb}</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">audio/mpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="metadata" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">metadata</stringProp>
                    <stringProp name="Argument.value"> {    &quot;started_at&quot;: &quot;${v_audiodates}&quot;,    &quot;ended_at&quot;: &quot;${v_audiodates1hour}&quot;,    &quot;channel&quot;: ${audioCounter},    &quot;total_channels&quot;: 4,    &quot;format&quot;: &quot;mp2&quot;,    &quot;filename&quot;: &quot;15h 15m.mp2&quot;,    &quot;courthouse&quot;: &quot;PerfCourtHouse01&quot;,    &quot;courtroom&quot;: &quot;PerfCourtroom01&quot;,    &quot;file_size&quot;: 213.448,    &quot;checksum&quot;: &quot;Phmv3F+lJTBS5BnsShUfOQ==&quot;,    &quot;cases&quot;: [      &quot;PerfCase_${v_randomCaseName}&quot;    ]  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="HTTPArgument.content_type">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">audios</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${ex_accessToken}</stringProp>
                  </elementProp>
                  <elementProp name="x-dtpc" elementType="Header">
                    <stringProp name="Header.name">x-dtpc</stringProp>
                    <stringProp name="Header.value">4$261474838_978h17vTCFUIAKFURHHRNPPCOHSKQRRHRBMNCRU-0e0</stringProp>
                  </elementProp>
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Darts - Api - POST - Audio - 336mb" enabled="false">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="${TEST_DATA}${FILE_TO_UPLOAD336mb}" elementType="HTTPFileArg">
                    <stringProp name="File.path">${TEST_DATA}${FILE_TO_UPLOAD336mb}</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                    <stringProp name="File.mimetype">audio/mpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="metadata" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">metadata</stringProp>
                    <stringProp name="Argument.value"> {    &quot;started_at&quot;: &quot;${v_audiodates}&quot;,    &quot;ended_at&quot;: &quot;${v_audiodates1hour}&quot;,    &quot;channel&quot;: ${audioCounter},    &quot;total_channels&quot;: 4,    &quot;format&quot;: &quot;mp2&quot;,    &quot;filename&quot;: &quot;24h.mp2&quot;,    &quot;courthouse&quot;: &quot;PerfCourtHouse01&quot;,    &quot;courtroom&quot;: &quot;PerfCourtroom01&quot;,    &quot;file_size&quot;: 335.919,    &quot;checksum&quot;: &quot;K/g+CvVeLAgEIKXlKaJ34Q==&quot;,    &quot;cases&quot;: [      &quot;PerfCase_${v_randomCaseName}&quot;    ]  }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="HTTPArgument.content_type">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">audios</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${ex_accessToken}</stringProp>
                  </elementProp>
                  <elementProp name="x-dtpc" elementType="Header">
                    <stringProp name="Header.name">x-dtpc</stringProp>
                    <stringProp name="Header.value">4$261474838_978h17vTCFUIAKFURHHRNPPCOHSKQRRHRBMNCRU-0e0</stringProp>
                  </elementProp>
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Darts - Api - POST - Audio" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${TEST_DATA}${FILE_TO_UPLOAD}" elementType="HTTPFileArg">
                <stringProp name="File.path">${TEST_DATA}${FILE_TO_UPLOAD}</stringProp>
                <stringProp name="File.paramname">file</stringProp>
                <stringProp name="File.mimetype">audio/mpeg</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="metadata" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">metadata</stringProp>
                <stringProp name="Argument.value"> {    &quot;started_at&quot;: &quot;${v_randomdates}&quot;,    &quot;ended_at&quot;: &quot;${v_randomdates1hour}&quot;,    &quot;channel&quot;: 1,    &quot;total_channels&quot;: 1,    &quot;format&quot;: &quot;mp2&quot;,    &quot;filename&quot;: &quot;sample.mp2&quot;,    &quot;courthouse&quot;: &quot;PerfCourtHouse01&quot;,    &quot;courtroom&quot;: &quot;PerfCourtroom01&quot;,    &quot;file_size&quot;: 937.96,    &quot;checksum&quot;: &quot;TVRMwq16b4mcZwPSlZj/iQ==&quot;,    &quot;cases&quot;: [      &quot;PerfCase_${v_randomCaseName}&quot;    ]  }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="HTTPArgument.content_type">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">audios</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Content-Disposition: form-data; name=&quot;transcript&quot;; filename=&quot;SampleDoc.docx&quot; </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${ex_accessToken}</stringProp>
              </elementProp>
              <elementProp name="x-dtpc" elementType="Header">
                <stringProp name="Header.name">x-dtpc</stringProp>
                <stringProp name="Header.value">4$261474838_978h17vTCFUIAKFURHHRNPPCOHSKQRRHRBMNCRU-0e0</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Darts - Api - POST - Audio - 100" enabled="false">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${TEST_DATA}${FILE_TO_UPLOAD}" elementType="HTTPFileArg">
                <stringProp name="File.path">${TEST_DATA}${FILE_TO_UPLOAD}</stringProp>
                <stringProp name="File.paramname">file</stringProp>
                <stringProp name="File.mimetype">audio/mpeg</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="metadata" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">metadata</stringProp>
                <stringProp name="Argument.value"> {    &quot;started_at&quot;: &quot;${v_randomdates}&quot;,    &quot;ended_at&quot;: &quot;${v_randomdates1hour}&quot;,    &quot;channel&quot;: 1,    &quot;total_channels&quot;: 1,    &quot;format&quot;: &quot;mp2&quot;,    &quot;filename&quot;: &quot;sample.mp2&quot;,    &quot;courthouse&quot;: &quot;PerfCourtHouse01&quot;,    &quot;courtroom&quot;: &quot;PerfCourtroom01&quot;,    &quot;file_size&quot;: 937.96,    &quot;checksum&quot;: &quot;TVRMwq16b4mcZwPSlZj/iQ==&quot;,    &quot;cases&quot;: [      &quot;PerfCase_ffnmuwptvb &quot;, &quot;PerfCase_iqnxkzjbnu&quot;, &quot;PerfCase_hglqumjowi&quot;, &quot;PerfCase_zkvrynklmo&quot;, &quot;PerfCase_azsbo &quot;, &quot;PerfCase_xqbnwqtepk &quot;, &quot;PerfCase_fcjqhwcsln&quot;, &quot;PerfCase_bxwsvcthuf&quot;, &quot;PerfCase_ihuezpfcnt&quot;, &quot;PerfCase_rcavfcojrl&quot;, &quot;PerfCase_lcczappwla&quot;, &quot;PerfCase_papmcousnz&quot;, &quot;PerfCase_mgconwpwoy&quot;, &quot;PerfCase_mwlwldddcg&quot;, &quot;PerfCase_glquggjcwt&quot;, &quot;PerfCase_yhzhmypvhe&quot;, &quot;PerfCase_hrrwszfvzl&quot;, &quot;PerfCase_${ex_randomCaseName}&quot;, &quot;PerfCase_gcmwdhsvao&quot;, &quot;PerfCase_uzhrrzjqup&quot;, &quot;PerfCase_vnblpapaay&quot;, &quot;PerfCase_wysnxpsvgw&quot;, &quot;PerfCase_wrwzpjlpbw&quot;, &quot;PerfCase_jkrfvkerhp&quot;, &quot;PerfCase_taqtwbghnm&quot;, &quot;PerfCase_fkxkfnhseh&quot;, &quot;PerfCase_dcxprfjczn&quot;, &quot;PerfCase_qumettnbxb&quot;, &quot;PerfCase_sjowqsfydn&quot;, &quot;PerfCase_quwweoqzce&quot;, &quot;PerfCase_waawcgizni&quot;, &quot;PerfCase_slqfaoqmml&quot;, &quot;PerfCase_uzwxnxupzh&quot;, &quot;PerfCase_rqrmdxdgqv&quot;, &quot;PerfCase_kjtdzfhuse&quot;, &quot;PerfCase_nicbbbnphw&quot;, &quot;PerfCase_dxhvfstzfb&quot;, &quot;PerfCase_qvffjoovik&quot;, &quot;PerfCase_kvpjszraxa&quot;, &quot;PerfCase_yvopwwteuy&quot;, &quot;PerfCase_pbfmzrqobk&quot;, &quot;PerfCase_wprmwacfyn&quot;, &quot;PerfCase_sofwmcotpy&quot;, &quot;PerfCase_rwpfnjxxdv&quot;, &quot;PerfCase_japtdjwvab&quot;, &quot;PerfCase_egfdnjokno&quot;, &quot;PerfCase_odglhbuzsr&quot;, &quot;PerfCase_nsemcvowox&quot;, &quot;PerfCase_ywkgaaoypy&quot;, &quot;PerfCase_nrmbauuvau&quot;, &quot;PerfCase_nayhyukupn&quot;, &quot;PerfCase_pzgoduksej&quot;, &quot;PerfCase_rhvtjzcrhc&quot;, &quot;PerfCase_tbxulknbqg&quot;, &quot;PerfCase_mwepwbcihr&quot;, &quot;PerfCase_kxtbkielkl&quot;, &quot;PerfCase_znfdinmzbi&quot;, &quot;PerfCase_mpkxmtdkfm&quot;, &quot;PerfCase_hmesqdhinh&quot;, &quot;PerfCase_yzzedilzyk&quot;, &quot;PerfCase_fhvwymzyer&quot;, &quot;PerfCase_rgmoxzkvnt&quot;, &quot;PerfCase_acaptuoiyo&quot;, &quot;PerfCase_tslbzwouag&quot;, &quot;PerfCase_qxisgvrrgb&quot;, &quot;PerfCase_gnzszwrlvy&quot;, &quot;PerfCase_ocsnukqamy&quot;, &quot;PerfCase_tbrgpuwbya&quot;, &quot;PerfCase_omunjcelxv&quot;, &quot;PerfCase_aqecrtrxbq&quot;, &quot;PerfCase_cvenryltzx&quot;, &quot;PerfCase_exmrboggnv&quot;, &quot;PerfCase_iybwzrzojp&quot;, &quot;PerfCase_qsolxvgsrz&quot;, &quot;PerfCase_orqauvgbwy&quot;, &quot;PerfCase_dtlfgdswya&quot;, &quot;PerfCase_vlbvqxysdx&quot;, &quot;PerfCase_rykxjdrqgi&quot;, &quot;PerfCase_kjfuqggbsk&quot;, &quot;PerfCase_gumjeyvsoe&quot;, &quot;PerfCase_mobsezgpub&quot;, &quot;PerfCase_ohrmxbssle&quot;, &quot;PerfCase_dlrhvkrsci&quot;, &quot;PerfCase_jgbyhupzpp&quot;, &quot;PerfCase_dhtbqcxpjc&quot;, &quot;PerfCase_xoystgbtqj&quot;, &quot;PerfCase_joqnzorrof&quot;, &quot;PerfCase_zsbitdjgbo&quot;, &quot;PerfCase_psnajgvfxt&quot;, &quot;PerfCase_ceygbjdjul&quot;, &quot;PerfCase_igdacmgfqz&quot;, &quot;PerfCase_iukwoozlrc&quot;, &quot;PerfCase_ivzrdrluou&quot;, &quot;PerfCase_wlqryvewgq&quot;, &quot;PerfCase_iaimpcxafd&quot;, &quot;PerfCase_gadthyhqgg&quot;, &quot;PerfCase_qxoczsitsr&quot;, &quot;PerfCase_rmbxgkgiot&quot;, &quot;PerfCase_orjawzqmjg&quot;, &quot;PerfCase_hetwvmanib&quot;, &quot;PerfCase_zgjfjzcwnn&quot;, &quot;PerfCase_tzzvivzjav&quot;, &quot;PerfCase_ckispkrfoo&quot;, &quot;PerfCase_${v_randomCaseName}&quot;, &quot;PerfCase_oyxxigkjum&quot;, &quot;PerfCase_ndoqimbkqa&quot;, &quot;PerfCase_hnkuwkbkys&quot;, &quot;PerfCase_ejqywcrvsb&quot;, &quot;PerfCase_zfagwluqww&quot;, &quot;PerfCase_yuvdbmzswy&quot;, &quot;PerfCase_mlyorhoopd&quot;, &quot;PerfCase_uzhetavshv&quot;, &quot;PerfCase_tqhajyzsvy&quot;, &quot;PerfCase_lbtuwpzory&quot;, &quot;PerfCase_uzynpivemt&quot;, &quot;PerfCase_peeit &quot;, &quot;PerfCase_cwliojsjrb&quot;, &quot;PerfCase_ovtnlstdzv&quot;, &quot;PerfCase_xfxjrfbeur&quot;, &quot;PerfCase_kzndqgyhlo&quot;, &quot;PerfCase_hfwmazekro&quot;, &quot;PerfCase_ntxjkyuqey&quot;, &quot;PerfCase_gsrnrcbgct&quot;, &quot;PerfCase_jhtwliqnjw&quot;, &quot;PerfCase_phjjocmnjx&quot;, &quot;PerfCase_vblpezsmiy&quot;, &quot;PerfCase_engipgleox&quot;, &quot;PerfCase_yyvojecpyq&quot;, &quot;PerfCase_cijysyeylg&quot;, &quot;PerfCase_upoenfguvk&quot;, &quot;PerfCase_hbsvpafnxe&quot;, &quot;PerfCase_behybefkgo&quot;, &quot;PerfCase_fngvoeiopo&quot;, &quot;PerfCase_ikzvqqgued&quot;, &quot;PerfCase_kecpetoihi&quot;, &quot;PerfCase_xhsox &quot;, &quot;PerfCase_qnvycfsqca&quot;, &quot;PerfCase_fxzxwabxox&quot;, &quot;PerfCase_icdcfgvpnm&quot;, &quot;PerfCase_wgbpnukguc&quot;, &quot;PerfCase_tbmvqdpufl&quot;, &quot;PerfCase_aqfijcyjse&quot;, &quot;PerfCase_ogtyjhnxzn&quot;, &quot;PerfCase_arjxdvlfcw&quot;, &quot;PerfCase_mdijylxukc&quot;, &quot;PerfCase_skxccddmcp&quot;, &quot;PerfCase_otvmlikxsx&quot;, &quot;PerfCase_vcdefvrqax&quot;, &quot;PerfCase_zysnmagcqw&quot;, &quot;PerfCase_spqjobwugk&quot;, &quot;PerfCase_gyhccyscvl&quot;, &quot;PerfCase_kfctnclkel&quot;, &quot;PerfCase_jdjnhlonmw&quot;, &quot;PerfCase_nijfugpmop&quot;, &quot;PerfCase_hayjzmacqc&quot;, &quot;PerfCase_hzorwmfoiy&quot;, &quot;PerfCase_ndkeeteuag&quot;, &quot;PerfCase_tnhfmhksbc&quot;, &quot;PerfCase_shptdsdrnd&quot;, &quot;PerfCase_wqbukantsp&quot;, &quot;PerfCase_njuricehaw&quot;, &quot;PerfCase_ahsnkslkqy&quot;, &quot;PerfCase_wimvctellq&quot;, &quot;PerfCase_bdsxwybail&quot;, &quot;PerfCase_grdowldhwe&quot;, &quot;PerfCase_prpikssxfp&quot;, &quot;PerfCase_qfgydxlidm&quot;, &quot;PerfCase_gbegkkqfes&quot;, &quot;PerfCase_jnewycrmjc&quot;, &quot;PerfCase_wxsfheczrm&quot;, &quot;PerfCase_sooemovqtd&quot;, &quot;PerfCase_bjvjhhzjhn&quot;, &quot;PerfCase_vzrsmsrjjp&quot;, &quot;PerfCase_cshbjcbtna&quot;, &quot;PerfCase_uwifvpfycw&quot;, &quot;PerfCase_qwebzewmfl&quot;, &quot;PerfCase_dzxdgnbthj&quot;, &quot;PerfCase_yqlewwbalo&quot;, &quot;PerfCase_yzjkupwhtt&quot;, &quot;PerfCase_zrfifwmnix&quot;, &quot;PerfCase_zrgvyjqval&quot;, &quot;PerfCase_hnvhynnozm&quot;, &quot;PerfCase_bvxwhdxmmi&quot;, &quot;PerfCase_dpffdupjdd&quot;, &quot;PerfCase_xntgoypyuq&quot;, &quot;PerfCase_wfgswdjaqt&quot;, &quot;PerfCase_thjjucvdyt&quot;, &quot;PerfCase_jpqlcizvuz&quot;, &quot;PerfCase_gqbtlgjguv&quot;, &quot;PerfCase_yicbmkwdxa&quot;, &quot;PerfCase_dtoijohyul&quot;, &quot;PerfCase_ngegasgdub&quot;, &quot;PerfCase_whcqsiysdv&quot;, &quot;PerfCase_enbwfgxfae&quot;, &quot;PerfCase_lwaqx &quot;, &quot;PerfCase_vvpcc &quot;, &quot;PerfCase_mfsdjefnsa&quot;, &quot;PerfCase_enxmojlmom&quot;, &quot;PerfCase_ogrub &quot;, &quot;PerfCase_zvieh &quot;, &quot;PerfCase_orrdz &quot;, &quot;PerfCase_kiimvntkoq&quot;, &quot;PerfCase_dfnbascfjt&quot;, &quot;PerfCase_bqoloxjgmr&quot;, &quot;PerfCase_lvknbtpjkk&quot;, &quot;PerfCase_ejcpbcgaoy&quot;, &quot;PerfCase_kelwxlwmqk&quot;, &quot;PerfCase_wrjujrcwro&quot;, &quot;PerfCase_kxxvctxdhp&quot;, &quot;PerfCase_ngtrxwdukf&quot;, &quot;PerfCase_qmeeqdynxt&quot;, &quot;PerfCase_opuyzkgnhb&quot;, &quot;PerfCase_icdbeqxlsg&quot;, &quot;PerfCase_sbpqcslyes&quot;, &quot;PerfCase_tzaefvjtoh&quot;, &quot;PerfCase_watoritrna&quot;, &quot;PerfCase_corjblmcbf&quot;, &quot;PerfCase_suywmzwfnc&quot;, &quot;PerfCase_vtxaqobhal&quot;, &quot;PerfCase_tbagyeryys&quot;, &quot;PerfCase_satxzmosjx&quot;, &quot;PerfCase_felivlmqxw&quot;, &quot;PerfCase_sspqcyhzbo&quot;, &quot;PerfCase_kbpksssspd&quot;, &quot;PerfCase_fcnkjmezud&quot;, &quot;PerfCase_mewugkrusf&quot;, &quot;PerfCase_bbasisecvb&quot;, &quot;PerfCase_jemixctfel&quot;, &quot;PerfCase_htlwuttjej&quot;, &quot;PerfCase_icrjpatark&quot;, &quot;PerfCase_fyhmlcinpe&quot;, &quot;PerfCase_wwmlxmmmsi&quot;, &quot;PerfCase_btxbacjtmi&quot;, &quot;PerfCase_qhqzidxzng&quot;, &quot;PerfCase_wrbsaqhuuq&quot;, &quot;PerfCase_bfzuoisjxq&quot;, &quot;PerfCase_cumolwnimw&quot;, &quot;PerfCase_mllmnqzigq&quot;, &quot;PerfCase_scmoqaqvyz&quot;, &quot;PerfCase_bqqxafpmjl&quot;, &quot;PerfCase_anexgxdrsk&quot;, &quot;PerfCase_iqmrowzclw&quot;, &quot;PerfCase_imglxekrec&quot;, &quot;PerfCase_zmoohriesv&quot;, &quot;PerfCase_huwykwtclk&quot;, &quot;PerfCase_skwakriqtb&quot;, &quot;PerfCase_ppryexcvbo&quot;, &quot;PerfCase_jmxdoaoekh&quot;, &quot;PerfCase_xblqoaqcja&quot;, &quot;PerfCase_rqvcbnbjww&quot;, &quot;PerfCase_gmtgxnvwfp&quot;, &quot;PerfCase_izyqucdkpu&quot;, &quot;PerfCase_qfqnjqnvfp&quot;, &quot;PerfCase_xritdwtqnd&quot;, &quot;PerfCase_hzuhfnmzep&quot;, &quot;PerfCase_iokqsmhkuc&quot;, &quot;PerfCase_xodotccmbu&quot;, &quot;PerfCase_bdfkawmrsn&quot;, &quot;PerfCase_pxpbwnvunb&quot;, &quot;PerfCase_ivaktemgaf&quot;, &quot;PerfCase_nelizqvlzd&quot;, &quot;PerfCase_zvgeszznih&quot;, &quot;PerfCase_igfcrblwzq&quot;, &quot;PerfCase_bnbjzpzmxf&quot;, &quot;PerfCase_ygwpvgjxsa&quot;, &quot;PerfCase_ljjhyfzbvr&quot;, &quot;PerfCase_nlrglbrrlt&quot;, &quot;PerfCase_msjslovpgb&quot;, &quot;PerfCase_bwtoydgatt&quot;, &quot;PerfCase_dspfwvtbvi&quot;, &quot;PerfCase_mzvponzfic&quot;, &quot;PerfCase_pksfawvtvp&quot;, &quot;PerfCase_bygrvpoxqr&quot;, &quot;PerfCase_yotbcxglij&quot;, &quot;PerfCase_xpyogggyyi&quot;, &quot;PerfCase_fpqofsmkdl&quot;, &quot;PerfCase_cetbdnlhku&quot;, &quot;PerfCase_tjtoitizol&quot;, &quot;PerfCase_isxhblxdpx&quot;, &quot;PerfCase_wcsoevqfym&quot;, &quot;PerfCase_gxllvjsljq&quot;, &quot;PerfCase_cubhxgnkxw&quot;, &quot;PerfCase_vumuwxlmfw&quot;, &quot;PerfCase_bkvgfhhesh&quot;, &quot;PerfCase_hcfbavxdiv&quot;, &quot;PerfCase_haehruujzq&quot;, &quot;PerfCase_wwrvjqptjm&quot;, &quot;PerfCase_zoqegwsihs&quot;, &quot;PerfCase_ybhsmlbmwq&quot;, &quot;PerfCase_vokbxxcosf&quot;, &quot;PerfCase_wcwxzthzdg&quot;, &quot;PerfCase_fnvzatrrfo&quot;, &quot;PerfCase_rhiwguvtxu&quot;, &quot;PerfCase_gtzsfodtyw&quot;, &quot;PerfCase_hgfvbsbkyr&quot;, &quot;PerfCase_jzfhwknfdg&quot;, &quot;PerfCase_cvpcdpbtre&quot;, &quot;PerfCase_hiwgyxtyjr&quot;, &quot;PerfCase_cvabioocqb&quot;, &quot;PerfCase_lrjmmzmrpd&quot;, &quot;PerfCase_zpgkndgqga&quot;, &quot;PerfCase_ryfcivuzqk&quot;, &quot;PerfCase_uvvzcmvluq&quot;, &quot;PerfCase_bzuypfinuy&quot;, &quot;PerfCase_kypcjhjszr&quot;, &quot;PerfCase_vifybpluwf&quot;, &quot;PerfCase_nacbafigoy&quot;, &quot;PerfCase_xvithngdde&quot;, &quot;PerfCase_eplpsjiuhm&quot;, &quot;PerfCase_rxgkkqtqrl&quot;, &quot;PerfCase_ubpzsprbrq&quot;, &quot;PerfCase_xvurrreqlk&quot;, &quot;PerfCase_nmwhnzhnwc&quot;, &quot;PerfCase_annroiakrq&quot;, &quot;PerfCase_ucfoirioio&quot;, &quot;PerfCase_uddfryxnsg&quot;, &quot;PerfCase_qptmvzclml&quot;, &quot;PerfCase_otznoqtmgs&quot;, &quot;PerfCase_xwlbczscdq&quot;, &quot;PerfCase_dajdrhwlhq&quot;, &quot;PerfCase_qlizkrhvin&quot;, &quot;PerfCase_nlhypmddnq&quot;, &quot;PerfCase_yunwvtqzag&quot;, &quot;PerfCase_hubnhhesft&quot;, &quot;PerfCase_bofxcwzqtm&quot;, &quot;PerfCase_cnipexpmpg&quot;, &quot;PerfCase_pjvcdceixt&quot;, &quot;PerfCase_avvhpyujdm&quot;, &quot;PerfCase_nkpdiocwnb&quot;, &quot;PerfCase_bmvuahuwuw&quot;, &quot;PerfCase_gssfxfpmnx&quot;, &quot;PerfCase_qjghjjkqrs&quot;, &quot;PerfCase_xyvolwpduv&quot;, &quot;PerfCase_adefnxgyqw&quot;, &quot;PerfCase_ufacqlvjdx&quot;, &quot;PerfCase_hweijclzta&quot;, &quot;PerfCase_zlfvqldijk&quot;, &quot;PerfCase_tqybiftbco&quot;, &quot;PerfCase_xhdnzyrlnf&quot;, &quot;PerfCase_ljeunjmnfj&quot;, &quot;PerfCase_gyxnquejmy&quot;, &quot;PerfCase_dfathrgxac&quot;, &quot;PerfCase_bmlxucanmh&quot;, &quot;PerfCase_whekywcoop&quot;, &quot;PerfCase_eltzewvjvw&quot;, &quot;PerfCase_wpmhrsswcv&quot;, &quot;PerfCase_ppdxtkokpe&quot;, &quot;PerfCase_gktufkkwpf&quot;, &quot;PerfCase_biodpteibl&quot;, &quot;PerfCase_idpiilvuum&quot;, &quot;PerfCase_zfrcgpyibm&quot;, &quot;PerfCase_dnwigyygzm&quot;, &quot;PerfCase_wbzmvfprmw&quot;, &quot;PerfCase_jyhsvwgegg&quot;, &quot;PerfCase_bcfsmfysmk&quot;, &quot;PerfCase_clusnmzwpo&quot;, &quot;PerfCase_nsvirtfywv&quot;, &quot;PerfCase_yheupqnynn&quot;, &quot;PerfCase_gobsjbslzc&quot;, &quot;PerfCase_rfmgoihtqc&quot;, &quot;PerfCase_qepgnejudj&quot;, &quot;PerfCase_bqnoweurby&quot;, &quot;PerfCase_hgygouxzvv&quot;, &quot;PerfCase_hnkhdwkprd&quot;, &quot;PerfCase_tafdqcabbm&quot;, &quot;PerfCase_baljebddxw&quot;, &quot;PerfCase_sxazaozblj&quot;, &quot;PerfCase_aetydiolgw&quot;, &quot;PerfCase_kvzwxmuoyv&quot;, &quot;PerfCase_xheerhttdc&quot;, &quot;PerfCase_ekgurvuamw&quot;, &quot;PerfCase_bniqaufamw&quot;, &quot;PerfCase_sxlwswynpm&quot;, &quot;PerfCase_vbizisyxre&quot;, &quot;PerfCase_tmbsjqzkqi&quot;, &quot;PerfCase_wzwaraepdq&quot;, &quot;PerfCase_ubzljniwne&quot;, &quot;PerfCase_nqtsxkjuqp&quot;, &quot;PerfCase_wommuritsp&quot;, &quot;PerfCase_mwubxzrela&quot;, &quot;PerfCase_txoaouqmix&quot;, &quot;PerfCase_jvtbjtbgpn&quot;, &quot;PerfCase_hadgqwlxaj&quot;, &quot;PerfCase_ivixrsdcgz&quot;, &quot;PerfCase_cbphggwply&quot;, &quot;PerfCase_unskervhlo&quot;, &quot;PerfCase_anwgmkhzuz&quot;, &quot;PerfCase_mfevnardmy&quot;, &quot;PerfCase_ymaqyfblmb&quot;, &quot;PerfCase_clqffjnhhr&quot;, &quot;PerfCase_ogpgrcsexo&quot;, &quot;PerfCase_htkughmwzs&quot;, &quot;PerfCase_zhrrauvqps&quot;, &quot;PerfCase_iodwbmhxkv&quot;, &quot;PerfCase_jyxiupized&quot;, &quot;PerfCase_zyjsnoxpem&quot;, &quot;PerfCase_gfkwarlzhw&quot;, &quot;PerfCase_fihduipjhg&quot;, &quot;PerfCase_gmkajkscqv&quot;, &quot;PerfCase_cvxxqupwrw&quot;, &quot;PerfCase_lmhitpzjga&quot;, &quot;PerfCase_vpniylwwms&quot;, &quot;PerfCase_kavvxnvqsn&quot;, &quot;PerfCase_zgwqksjrhu&quot;, &quot;PerfCase_clyhjxqjha&quot;, &quot;PerfCase_urhunjxuqk&quot;, &quot;PerfCase_eikjrhajhy&quot;, &quot;PerfCase_czpaecoqxg&quot;, &quot;PerfCase_jwhthkzmce&quot;, &quot;PerfCase_joqjlsyred&quot;, &quot;PerfCase_xrvdcmlfba&quot;, &quot;PerfCase_kouetqstdv&quot;, &quot;PerfCase_wnckrvabjx&quot;, &quot;PerfCase_kqnhwkwibj&quot;, &quot;PerfCase_rraxgeglzw&quot;, &quot;PerfCase_wmiurauxip&quot;, &quot;PerfCase_wcxjhoyfsx&quot;, &quot;PerfCase_ybegvenshk&quot;, &quot;PerfCase_wzoppnfffw&quot;, &quot;PerfCase_yzmatkldym&quot;, &quot;PerfCase_mjjzqrcxtk&quot;, &quot;PerfCase_zukdeosniq&quot;, &quot;PerfCase_bwmbllfkck&quot;, &quot;PerfCase_ipgexexhzx&quot;, &quot;PerfCase_orxhvrgsrg&quot;, &quot;PerfCase_rnchvxkwpa&quot;, &quot;PerfCase_sldrcckktc&quot;, &quot;PerfCase_whxqvgpmdo&quot;, &quot;PerfCase_pmugcnehsf&quot;, &quot;PerfCase_luwzuctayg&quot;, &quot;PerfCase_gfszqftzvf&quot;, &quot;PerfCase_bhaxwpbtns&quot;, &quot;PerfCase_scwkfftpei&quot;, &quot;PerfCase_gmysjqosbc&quot;, &quot;PerfCase_ebulcskdyq&quot;, &quot;PerfCase_bgagaldoil&quot;, &quot;PerfCase_mpebntxtmw&quot;, &quot;PerfCase_qxiwvljfqh&quot;, &quot;PerfCase_zaftbnbswd&quot;, &quot;PerfCase_tnflbdvetw&quot;, &quot;PerfCase_idiocubdrw&quot;, &quot;PerfCase_oyqnqpzhrx&quot;, &quot;PerfCase_gzxcsgysro&quot;, &quot;PerfCase_mybkdrzwba&quot;, &quot;PerfCase_snlvnoulhn&quot;, &quot;PerfCase_pwnodqyqwa&quot;, &quot;PerfCase_oomhdgbjzd&quot;, &quot;PerfCase_lwghagygzh&quot;, &quot;PerfCase_bmwjnqveng&quot;, &quot;PerfCase_agrvbayxhc&quot;, &quot;PerfCase_angvbciota&quot;, &quot;PerfCase_skxeocitsi&quot;, &quot;PerfCase_ujyfovyxqz&quot;, &quot;PerfCase_miqsuzuoum&quot;, &quot;PerfCase_rappiyqcag&quot;, &quot;PerfCase_lrfvklxnld&quot;, &quot;PerfCase_bxrugmadim&quot;, &quot;PerfCase_mocdncfhqn&quot;, &quot;PerfCase_giejayqico&quot;, &quot;PerfCase_tbodskxxcs&quot;, &quot;PerfCase_elpdtzvasf&quot;, &quot;PerfCase_fyyvzidcbo&quot;, &quot;PerfCase_xmntwcfuqu&quot;, &quot;PerfCase_xhdjytevvo&quot;, &quot;PerfCase_lsutoslqvq&quot;, &quot;PerfCase_epswlnhzzn&quot;, &quot;PerfCase_mkuquekidh&quot;, &quot;PerfCase_uhpolburla&quot;, &quot;PerfCase_bwvhiwuqpd&quot;, &quot;PerfCase_pjkyjwpdtp&quot;, &quot;PerfCase_iroivfbjat&quot;, &quot;PerfCase_fijnesfwcg&quot;, &quot;PerfCase_mzvjgbqxgc&quot;, &quot;PerfCase_piqpnfyaij&quot;, &quot;PerfCase_mbbmbkccdm&quot;, &quot;PerfCase_gldtwvuvmm&quot;, &quot;PerfCase_abkngydrei&quot;, &quot;PerfCase_ibthrmlbwd&quot;, &quot;PerfCase_zqigufzdjz&quot;, &quot;PerfCase_wmemeuhlkf&quot;, &quot;PerfCase_ztgtexyenm&quot;, &quot;PerfCase_tqtvobocbr&quot;, &quot;PerfCase_knglmptxja&quot;, &quot;PerfCase_blseyesyeo&quot;, &quot;PerfCase_usdjcnpymh&quot;, &quot;PerfCase_ipqngiidnk&quot;, &quot;PerfCase_ctxtreyoko&quot;, &quot;PerfCase_cvveavrvtv&quot;, &quot;PerfCase_kzzfqcgilc&quot;]  }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="HTTPArgument.content_type">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">audios</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Content-Disposition: form-data; name=&quot;transcript&quot;; filename=&quot;SampleDoc.docx&quot; </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${ex_accessToken}</stringProp>
              </elementProp>
              <elementProp name="x-dtpc" elementType="Header">
                <stringProp name="Header.name">x-dtpc</stringProp>
                <stringProp name="Header.value">4$261474838_978h17vTCFUIAKFURHHRNPPCOHSKQRRHRBMNCRU-0e0</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Darts - Api - POST - Audio - 350" enabled="false">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${TEST_DATA}${FILE_TO_UPLOAD}" elementType="HTTPFileArg">
                <stringProp name="File.path">${TEST_DATA}${FILE_TO_UPLOAD}</stringProp>
                <stringProp name="File.paramname">file</stringProp>
                <stringProp name="File.mimetype">audio/mpeg</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="metadata" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">metadata</stringProp>
                <stringProp name="Argument.value"> {    &quot;started_at&quot;: &quot;${v_randomdates}&quot;,    &quot;ended_at&quot;: &quot;${v_randomdates1hour}&quot;,    &quot;channel&quot;: 1,    &quot;total_channels&quot;: 1,    &quot;format&quot;: &quot;mp2&quot;,    &quot;filename&quot;: &quot;sample.mp2&quot;,    &quot;courthouse&quot;: &quot;PerfCourtHouse01&quot;,    &quot;courtroom&quot;: &quot;PerfCourtroom01&quot;,    &quot;file_size&quot;: 937.96,    &quot;checksum&quot;: &quot;TVRMwq16b4mcZwPSlZj/iQ==&quot;,    &quot;cases&quot;: [      &quot;PerfCase_ffnmuwptvb &quot;, &quot;PerfCase_iqnxkzjbnu&quot;, &quot;PerfCase_hglqumjowi&quot;, &quot;PerfCase_zkvrynklmo&quot;, &quot;PerfCase_azsbo &quot;, &quot;PerfCase_xqbnwqtepk &quot;, &quot;PerfCase_fcjqhwcsln&quot;, &quot;PerfCase_bxwsvcthuf&quot;, &quot;PerfCase_ihuezpfcnt&quot;, &quot;PerfCase_rcavfcojrl&quot;, &quot;PerfCase_lcczappwla&quot;, &quot;PerfCase_papmcousnz&quot;, &quot;PerfCase_mgconwpwoy&quot;, &quot;PerfCase_mwlwldddcg&quot;, &quot;PerfCase_glquggjcwt&quot;, &quot;PerfCase_yhzhmypvhe&quot;, &quot;PerfCase_hrrwszfvzl&quot;, &quot;PerfCase_${ex_randomCaseName}&quot;, &quot;PerfCase_gcmwdhsvao&quot;, &quot;PerfCase_uzhrrzjqup&quot;, &quot;PerfCase_vnblpapaay&quot;, &quot;PerfCase_wysnxpsvgw&quot;, &quot;PerfCase_wrwzpjlpbw&quot;, &quot;PerfCase_jkrfvkerhp&quot;, &quot;PerfCase_taqtwbghnm&quot;, &quot;PerfCase_fkxkfnhseh&quot;, &quot;PerfCase_dcxprfjczn&quot;, &quot;PerfCase_qumettnbxb&quot;, &quot;PerfCase_sjowqsfydn&quot;, &quot;PerfCase_quwweoqzce&quot;, &quot;PerfCase_waawcgizni&quot;, &quot;PerfCase_slqfaoqmml&quot;, &quot;PerfCase_uzwxnxupzh&quot;, &quot;PerfCase_rqrmdxdgqv&quot;, &quot;PerfCase_kjtdzfhuse&quot;, &quot;PerfCase_nicbbbnphw&quot;, &quot;PerfCase_dxhvfstzfb&quot;, &quot;PerfCase_qvffjoovik&quot;, &quot;PerfCase_kvpjszraxa&quot;, &quot;PerfCase_yvopwwteuy&quot;, &quot;PerfCase_pbfmzrqobk&quot;, &quot;PerfCase_wprmwacfyn&quot;, &quot;PerfCase_sofwmcotpy&quot;, &quot;PerfCase_rwpfnjxxdv&quot;, &quot;PerfCase_japtdjwvab&quot;, &quot;PerfCase_egfdnjokno&quot;, &quot;PerfCase_odglhbuzsr&quot;, &quot;PerfCase_nsemcvowox&quot;, &quot;PerfCase_ywkgaaoypy&quot;, &quot;PerfCase_nrmbauuvau&quot;, &quot;PerfCase_nayhyukupn&quot;, &quot;PerfCase_pzgoduksej&quot;, &quot;PerfCase_rhvtjzcrhc&quot;, &quot;PerfCase_tbxulknbqg&quot;, &quot;PerfCase_mwepwbcihr&quot;, &quot;PerfCase_kxtbkielkl&quot;, &quot;PerfCase_znfdinmzbi&quot;, &quot;PerfCase_mpkxmtdkfm&quot;, &quot;PerfCase_hmesqdhinh&quot;, &quot;PerfCase_yzzedilzyk&quot;, &quot;PerfCase_fhvwymzyer&quot;, &quot;PerfCase_rgmoxzkvnt&quot;, &quot;PerfCase_acaptuoiyo&quot;, &quot;PerfCase_tslbzwouag&quot;, &quot;PerfCase_qxisgvrrgb&quot;, &quot;PerfCase_gnzszwrlvy&quot;, &quot;PerfCase_ocsnukqamy&quot;, &quot;PerfCase_tbrgpuwbya&quot;, &quot;PerfCase_omunjcelxv&quot;, &quot;PerfCase_aqecrtrxbq&quot;, &quot;PerfCase_cvenryltzx&quot;, &quot;PerfCase_exmrboggnv&quot;, &quot;PerfCase_iybwzrzojp&quot;, &quot;PerfCase_qsolxvgsrz&quot;, &quot;PerfCase_orqauvgbwy&quot;, &quot;PerfCase_dtlfgdswya&quot;, &quot;PerfCase_vlbvqxysdx&quot;, &quot;PerfCase_rykxjdrqgi&quot;, &quot;PerfCase_kjfuqggbsk&quot;, &quot;PerfCase_gumjeyvsoe&quot;, &quot;PerfCase_mobsezgpub&quot;, &quot;PerfCase_ohrmxbssle&quot;, &quot;PerfCase_dlrhvkrsci&quot;, &quot;PerfCase_jgbyhupzpp&quot;, &quot;PerfCase_dhtbqcxpjc&quot;, &quot;PerfCase_xoystgbtqj&quot;, &quot;PerfCase_joqnzorrof&quot;, &quot;PerfCase_zsbitdjgbo&quot;, &quot;PerfCase_psnajgvfxt&quot;, &quot;PerfCase_ceygbjdjul&quot;, &quot;PerfCase_igdacmgfqz&quot;, &quot;PerfCase_iukwoozlrc&quot;, &quot;PerfCase_ivzrdrluou&quot;, &quot;PerfCase_wlqryvewgq&quot;, &quot;PerfCase_iaimpcxafd&quot;, &quot;PerfCase_gadthyhqgg&quot;, &quot;PerfCase_qxoczsitsr&quot;, &quot;PerfCase_rmbxgkgiot&quot;, &quot;PerfCase_orjawzqmjg&quot;, &quot;PerfCase_hetwvmanib&quot;, &quot;PerfCase_zgjfjzcwnn&quot;, &quot;PerfCase_tzzvivzjav&quot;, &quot;PerfCase_ckispkrfoo&quot;, &quot;PerfCase_${v_randomCaseName}&quot;, &quot;PerfCase_oyxxigkjum&quot;, &quot;PerfCase_ndoqimbkqa&quot;, &quot;PerfCase_hnkuwkbkys&quot;, &quot;PerfCase_ejqywcrvsb&quot;, &quot;PerfCase_zfagwluqww&quot;, &quot;PerfCase_yuvdbmzswy&quot;, &quot;PerfCase_mlyorhoopd&quot;, &quot;PerfCase_uzhetavshv&quot;, &quot;PerfCase_tqhajyzsvy&quot;, &quot;PerfCase_lbtuwpzory&quot;, &quot;PerfCase_uzynpivemt&quot;, &quot;PerfCase_peeit &quot;, &quot;PerfCase_cwliojsjrb&quot;, &quot;PerfCase_ovtnlstdzv&quot;, &quot;PerfCase_xfxjrfbeur&quot;, &quot;PerfCase_kzndqgyhlo&quot;, &quot;PerfCase_hfwmazekro&quot;, &quot;PerfCase_ntxjkyuqey&quot;, &quot;PerfCase_gsrnrcbgct&quot;, &quot;PerfCase_jhtwliqnjw&quot;, &quot;PerfCase_phjjocmnjx&quot;, &quot;PerfCase_vblpezsmiy&quot;, &quot;PerfCase_engipgleox&quot;, &quot;PerfCase_yyvojecpyq&quot;, &quot;PerfCase_cijysyeylg&quot;, &quot;PerfCase_upoenfguvk&quot;, &quot;PerfCase_hbsvpafnxe&quot;, &quot;PerfCase_behybefkgo&quot;, &quot;PerfCase_fngvoeiopo&quot;, &quot;PerfCase_ikzvqqgued&quot;, &quot;PerfCase_kecpetoihi&quot;, &quot;PerfCase_xhsox &quot;, &quot;PerfCase_qnvycfsqca&quot;, &quot;PerfCase_fxzxwabxox&quot;, &quot;PerfCase_icdcfgvpnm&quot;, &quot;PerfCase_wgbpnukguc&quot;, &quot;PerfCase_tbmvqdpufl&quot;, &quot;PerfCase_aqfijcyjse&quot;, &quot;PerfCase_ogtyjhnxzn&quot;, &quot;PerfCase_arjxdvlfcw&quot;, &quot;PerfCase_mdijylxukc&quot;, &quot;PerfCase_skxccddmcp&quot;, &quot;PerfCase_otvmlikxsx&quot;, &quot;PerfCase_vcdefvrqax&quot;, &quot;PerfCase_zysnmagcqw&quot;, &quot;PerfCase_spqjobwugk&quot;, &quot;PerfCase_gyhccyscvl&quot;, &quot;PerfCase_kfctnclkel&quot;, &quot;PerfCase_jdjnhlonmw&quot;, &quot;PerfCase_nijfugpmop&quot;, &quot;PerfCase_hayjzmacqc&quot;, &quot;PerfCase_hzorwmfoiy&quot;, &quot;PerfCase_ndkeeteuag&quot;, &quot;PerfCase_tnhfmhksbc&quot;, &quot;PerfCase_shptdsdrnd&quot;, &quot;PerfCase_wqbukantsp&quot;, &quot;PerfCase_njuricehaw&quot;, &quot;PerfCase_ahsnkslkqy&quot;, &quot;PerfCase_wimvctellq&quot;, &quot;PerfCase_bdsxwybail&quot;, &quot;PerfCase_grdowldhwe&quot;, &quot;PerfCase_prpikssxfp&quot;, &quot;PerfCase_qfgydxlidm&quot;, &quot;PerfCase_gbegkkqfes&quot;, &quot;PerfCase_jnewycrmjc&quot;, &quot;PerfCase_wxsfheczrm&quot;, &quot;PerfCase_sooemovqtd&quot;, &quot;PerfCase_bjvjhhzjhn&quot;, &quot;PerfCase_vzrsmsrjjp&quot;, &quot;PerfCase_cshbjcbtna&quot;, &quot;PerfCase_uwifvpfycw&quot;, &quot;PerfCase_qwebzewmfl&quot;, &quot;PerfCase_dzxdgnbthj&quot;, &quot;PerfCase_yqlewwbalo&quot;, &quot;PerfCase_yzjkupwhtt&quot;, &quot;PerfCase_zrfifwmnix&quot;, &quot;PerfCase_zrgvyjqval&quot;, &quot;PerfCase_hnvhynnozm&quot;, &quot;PerfCase_bvxwhdxmmi&quot;, &quot;PerfCase_dpffdupjdd&quot;, &quot;PerfCase_xntgoypyuq&quot;, &quot;PerfCase_wfgswdjaqt&quot;, &quot;PerfCase_thjjucvdyt&quot;, &quot;PerfCase_jpqlcizvuz&quot;, &quot;PerfCase_gqbtlgjguv&quot;, &quot;PerfCase_yicbmkwdxa&quot;, &quot;PerfCase_dtoijohyul&quot;, &quot;PerfCase_ngegasgdub&quot;, &quot;PerfCase_whcqsiysdv&quot;, &quot;PerfCase_enbwfgxfae&quot;, &quot;PerfCase_lwaqx &quot;, &quot;PerfCase_vvpcc &quot;, &quot;PerfCase_mfsdjefnsa&quot;, &quot;PerfCase_enxmojlmom&quot;, &quot;PerfCase_ogrub &quot;, &quot;PerfCase_zvieh &quot;, &quot;PerfCase_orrdz &quot;, &quot;PerfCase_kiimvntkoq&quot;, &quot;PerfCase_dfnbascfjt&quot;, &quot;PerfCase_bqoloxjgmr&quot;, &quot;PerfCase_lvknbtpjkk&quot;, &quot;PerfCase_ejcpbcgaoy&quot;, &quot;PerfCase_kelwxlwmqk&quot;, &quot;PerfCase_wrjujrcwro&quot;, &quot;PerfCase_kxxvctxdhp&quot;, &quot;PerfCase_ngtrxwdukf&quot;, &quot;PerfCase_qmeeqdynxt&quot;, &quot;PerfCase_opuyzkgnhb&quot;, &quot;PerfCase_icdbeqxlsg&quot;, &quot;PerfCase_sbpqcslyes&quot;, &quot;PerfCase_tzaefvjtoh&quot;, &quot;PerfCase_watoritrna&quot;, &quot;PerfCase_corjblmcbf&quot;, &quot;PerfCase_suywmzwfnc&quot;, &quot;PerfCase_vtxaqobhal&quot;, &quot;PerfCase_tbagyeryys&quot;, &quot;PerfCase_satxzmosjx&quot;, &quot;PerfCase_felivlmqxw&quot;, &quot;PerfCase_sspqcyhzbo&quot;, &quot;PerfCase_kbpksssspd&quot;, &quot;PerfCase_fcnkjmezud&quot;, &quot;PerfCase_mewugkrusf&quot;, &quot;PerfCase_bbasisecvb&quot;, &quot;PerfCase_jemixctfel&quot;, &quot;PerfCase_htlwuttjej&quot;, &quot;PerfCase_icrjpatark&quot;, &quot;PerfCase_fyhmlcinpe&quot;, &quot;PerfCase_wwmlxmmmsi&quot;, &quot;PerfCase_btxbacjtmi&quot;, &quot;PerfCase_qhqzidxzng&quot;, &quot;PerfCase_wrbsaqhuuq&quot;, &quot;PerfCase_bfzuoisjxq&quot;, &quot;PerfCase_cumolwnimw&quot;, &quot;PerfCase_mllmnqzigq&quot;, &quot;PerfCase_scmoqaqvyz&quot;, &quot;PerfCase_bqqxafpmjl&quot;, &quot;PerfCase_anexgxdrsk&quot;, &quot;PerfCase_iqmrowzclw&quot;, &quot;PerfCase_imglxekrec&quot;, &quot;PerfCase_zmoohriesv&quot;, &quot;PerfCase_huwykwtclk&quot;, &quot;PerfCase_skwakriqtb&quot;, &quot;PerfCase_ppryexcvbo&quot;, &quot;PerfCase_jmxdoaoekh&quot;, &quot;PerfCase_xblqoaqcja&quot;, &quot;PerfCase_rqvcbnbjww&quot;, &quot;PerfCase_gmtgxnvwfp&quot;, &quot;PerfCase_izyqucdkpu&quot;, &quot;PerfCase_qfqnjqnvfp&quot;, &quot;PerfCase_xritdwtqnd&quot;, &quot;PerfCase_hzuhfnmzep&quot;, &quot;PerfCase_iokqsmhkuc&quot;, &quot;PerfCase_xodotccmbu&quot;, &quot;PerfCase_bdfkawmrsn&quot;, &quot;PerfCase_pxpbwnvunb&quot;, &quot;PerfCase_ivaktemgaf&quot;, &quot;PerfCase_nelizqvlzd&quot;, &quot;PerfCase_zvgeszznih&quot;, &quot;PerfCase_igfcrblwzq&quot;, &quot;PerfCase_bnbjzpzmxf&quot;, &quot;PerfCase_ygwpvgjxsa&quot;, &quot;PerfCase_ljjhyfzbvr&quot;, &quot;PerfCase_nlrglbrrlt&quot;, &quot;PerfCase_msjslovpgb&quot;, &quot;PerfCase_bwtoydgatt&quot;, &quot;PerfCase_dspfwvtbvi&quot;, &quot;PerfCase_mzvponzfic&quot;, &quot;PerfCase_pksfawvtvp&quot;, &quot;PerfCase_bygrvpoxqr&quot;, &quot;PerfCase_yotbcxglij&quot;, &quot;PerfCase_xpyogggyyi&quot;, &quot;PerfCase_fpqofsmkdl&quot;, &quot;PerfCase_cetbdnlhku&quot;, &quot;PerfCase_tjtoitizol&quot;, &quot;PerfCase_isxhblxdpx&quot;, &quot;PerfCase_wcsoevqfym&quot;, &quot;PerfCase_gxllvjsljq&quot;, &quot;PerfCase_cubhxgnkxw&quot;, &quot;PerfCase_vumuwxlmfw&quot;, &quot;PerfCase_bkvgfhhesh&quot;, &quot;PerfCase_hcfbavxdiv&quot;, &quot;PerfCase_haehruujzq&quot;, &quot;PerfCase_wwrvjqptjm&quot;, &quot;PerfCase_zoqegwsihs&quot;, &quot;PerfCase_ybhsmlbmwq&quot;, &quot;PerfCase_vokbxxcosf&quot;, &quot;PerfCase_wcwxzthzdg&quot;, &quot;PerfCase_fnvzatrrfo&quot;, &quot;PerfCase_rhiwguvtxu&quot;, &quot;PerfCase_gtzsfodtyw&quot;, &quot;PerfCase_hgfvbsbkyr&quot;, &quot;PerfCase_jzfhwknfdg&quot;, &quot;PerfCase_cvpcdpbtre&quot;, &quot;PerfCase_hiwgyxtyjr&quot;, &quot;PerfCase_cvabioocqb&quot;, &quot;PerfCase_lrjmmzmrpd&quot;, &quot;PerfCase_zpgkndgqga&quot;, &quot;PerfCase_ryfcivuzqk&quot;, &quot;PerfCase_uvvzcmvluq&quot;, &quot;PerfCase_bzuypfinuy&quot;, &quot;PerfCase_kypcjhjszr&quot;, &quot;PerfCase_vifybpluwf&quot;, &quot;PerfCase_nacbafigoy&quot;, &quot;PerfCase_xvithngdde&quot;, &quot;PerfCase_eplpsjiuhm&quot;, &quot;PerfCase_rxgkkqtqrl&quot;, &quot;PerfCase_ubpzsprbrq&quot;, &quot;PerfCase_xvurrreqlk&quot;, &quot;PerfCase_nmwhnzhnwc&quot;, &quot;PerfCase_annroiakrq&quot;, &quot;PerfCase_ucfoirioio&quot;, &quot;PerfCase_uddfryxnsg&quot;, &quot;PerfCase_qptmvzclml&quot;, &quot;PerfCase_otznoqtmgs&quot;, &quot;PerfCase_xwlbczscdq&quot;, &quot;PerfCase_dajdrhwlhq&quot;, &quot;PerfCase_qlizkrhvin&quot;, &quot;PerfCase_nlhypmddnq&quot;, &quot;PerfCase_yunwvtqzag&quot;, &quot;PerfCase_hubnhhesft&quot;, &quot;PerfCase_bofxcwzqtm&quot;, &quot;PerfCase_cnipexpmpg&quot;, &quot;PerfCase_pjvcdceixt&quot;, &quot;PerfCase_avvhpyujdm&quot;, &quot;PerfCase_nkpdiocwnb&quot;, &quot;PerfCase_bmvuahuwuw&quot;, &quot;PerfCase_gssfxfpmnx&quot;, &quot;PerfCase_qjghjjkqrs&quot;, &quot;PerfCase_xyvolwpduv&quot;, &quot;PerfCase_adefnxgyqw&quot;, &quot;PerfCase_ufacqlvjdx&quot;, &quot;PerfCase_hweijclzta&quot;, &quot;PerfCase_zlfvqldijk&quot;, &quot;PerfCase_tqybiftbco&quot;, &quot;PerfCase_xhdnzyrlnf&quot;, &quot;PerfCase_ljeunjmnfj&quot;, &quot;PerfCase_gyxnquejmy&quot;, &quot;PerfCase_dfathrgxac&quot;, &quot;PerfCase_bmlxucanmh&quot;, &quot;PerfCase_whekywcoop&quot;, &quot;PerfCase_eltzewvjvw&quot;, &quot;PerfCase_wpmhrsswcv&quot;, &quot;PerfCase_ppdxtkokpe&quot;, &quot;PerfCase_gktufkkwpf&quot;, &quot;PerfCase_biodpteibl&quot;, &quot;PerfCase_idpiilvuum&quot;]  }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="HTTPArgument.content_type">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">audios</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Content-Disposition: form-data; name=&quot;transcript&quot;; filename=&quot;SampleDoc.docx&quot; </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${ex_accessToken}</stringProp>
              </elementProp>
              <elementProp name="x-dtpc" elementType="Header">
                <stringProp name="Header.name">x-dtpc</stringProp>
                <stringProp name="Header.value">4$261474838_978h17vTCFUIAKFURHHRNPPCOHSKQRRHRBMNCRU-0e0</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Darts - Api - POST - Audio - 400" enabled="false">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${TEST_DATA}${FILE_TO_UPLOAD}" elementType="HTTPFileArg">
                <stringProp name="File.path">${TEST_DATA}${FILE_TO_UPLOAD}</stringProp>
                <stringProp name="File.paramname">file</stringProp>
                <stringProp name="File.mimetype">audio/mpeg</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="metadata" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">metadata</stringProp>
                <stringProp name="Argument.value"> {    &quot;started_at&quot;: &quot;${v_randomdates}&quot;,    &quot;ended_at&quot;: &quot;${v_randomdates1hour}&quot;,    &quot;channel&quot;: 1,    &quot;total_channels&quot;: 1,    &quot;format&quot;: &quot;mp2&quot;,    &quot;filename&quot;: &quot;sample.mp2&quot;,    &quot;courthouse&quot;: &quot;PerfCourtHouse01&quot;,    &quot;courtroom&quot;: &quot;PerfCourtroom01&quot;,    &quot;file_size&quot;: 937.96,    &quot;checksum&quot;: &quot;TVRMwq16b4mcZwPSlZj/iQ==&quot;,    &quot;cases&quot;: [      &quot;PerfCase_ffnmuwptvb &quot;, &quot;PerfCase_iqnxkzjbnu&quot;, &quot;PerfCase_hglqumjowi&quot;, &quot;PerfCase_zkvrynklmo&quot;, &quot;PerfCase_azsbo &quot;, &quot;PerfCase_xqbnwqtepk &quot;, &quot;PerfCase_fcjqhwcsln&quot;, &quot;PerfCase_bxwsvcthuf&quot;, &quot;PerfCase_ihuezpfcnt&quot;, &quot;PerfCase_rcavfcojrl&quot;, &quot;PerfCase_lcczappwla&quot;, &quot;PerfCase_papmcousnz&quot;, &quot;PerfCase_mgconwpwoy&quot;, &quot;PerfCase_mwlwldddcg&quot;, &quot;PerfCase_glquggjcwt&quot;, &quot;PerfCase_yhzhmypvhe&quot;, &quot;PerfCase_hrrwszfvzl&quot;, &quot;PerfCase_${ex_randomCaseName}&quot;, &quot;PerfCase_gcmwdhsvao&quot;, &quot;PerfCase_uzhrrzjqup&quot;, &quot;PerfCase_vnblpapaay&quot;, &quot;PerfCase_wysnxpsvgw&quot;, &quot;PerfCase_wrwzpjlpbw&quot;, &quot;PerfCase_jkrfvkerhp&quot;, &quot;PerfCase_taqtwbghnm&quot;, &quot;PerfCase_fkxkfnhseh&quot;, &quot;PerfCase_dcxprfjczn&quot;, &quot;PerfCase_qumettnbxb&quot;, &quot;PerfCase_sjowqsfydn&quot;, &quot;PerfCase_quwweoqzce&quot;, &quot;PerfCase_waawcgizni&quot;, &quot;PerfCase_slqfaoqmml&quot;, &quot;PerfCase_uzwxnxupzh&quot;, &quot;PerfCase_rqrmdxdgqv&quot;, &quot;PerfCase_kjtdzfhuse&quot;, &quot;PerfCase_nicbbbnphw&quot;, &quot;PerfCase_dxhvfstzfb&quot;, &quot;PerfCase_qvffjoovik&quot;, &quot;PerfCase_kvpjszraxa&quot;, &quot;PerfCase_yvopwwteuy&quot;, &quot;PerfCase_pbfmzrqobk&quot;, &quot;PerfCase_wprmwacfyn&quot;, &quot;PerfCase_sofwmcotpy&quot;, &quot;PerfCase_rwpfnjxxdv&quot;, &quot;PerfCase_japtdjwvab&quot;, &quot;PerfCase_egfdnjokno&quot;, &quot;PerfCase_odglhbuzsr&quot;, &quot;PerfCase_nsemcvowox&quot;, &quot;PerfCase_ywkgaaoypy&quot;, &quot;PerfCase_nrmbauuvau&quot;, &quot;PerfCase_nayhyukupn&quot;, &quot;PerfCase_pzgoduksej&quot;, &quot;PerfCase_rhvtjzcrhc&quot;, &quot;PerfCase_tbxulknbqg&quot;, &quot;PerfCase_mwepwbcihr&quot;, &quot;PerfCase_kxtbkielkl&quot;, &quot;PerfCase_znfdinmzbi&quot;, &quot;PerfCase_mpkxmtdkfm&quot;, &quot;PerfCase_hmesqdhinh&quot;, &quot;PerfCase_yzzedilzyk&quot;, &quot;PerfCase_fhvwymzyer&quot;, &quot;PerfCase_rgmoxzkvnt&quot;, &quot;PerfCase_acaptuoiyo&quot;, &quot;PerfCase_tslbzwouag&quot;, &quot;PerfCase_qxisgvrrgb&quot;, &quot;PerfCase_gnzszwrlvy&quot;, &quot;PerfCase_ocsnukqamy&quot;, &quot;PerfCase_tbrgpuwbya&quot;, &quot;PerfCase_omunjcelxv&quot;, &quot;PerfCase_aqecrtrxbq&quot;, &quot;PerfCase_cvenryltzx&quot;, &quot;PerfCase_exmrboggnv&quot;, &quot;PerfCase_iybwzrzojp&quot;, &quot;PerfCase_qsolxvgsrz&quot;, &quot;PerfCase_orqauvgbwy&quot;, &quot;PerfCase_dtlfgdswya&quot;, &quot;PerfCase_vlbvqxysdx&quot;, &quot;PerfCase_rykxjdrqgi&quot;, &quot;PerfCase_kjfuqggbsk&quot;, &quot;PerfCase_gumjeyvsoe&quot;, &quot;PerfCase_mobsezgpub&quot;, &quot;PerfCase_ohrmxbssle&quot;, &quot;PerfCase_dlrhvkrsci&quot;, &quot;PerfCase_jgbyhupzpp&quot;, &quot;PerfCase_dhtbqcxpjc&quot;, &quot;PerfCase_xoystgbtqj&quot;, &quot;PerfCase_joqnzorrof&quot;, &quot;PerfCase_zsbitdjgbo&quot;, &quot;PerfCase_psnajgvfxt&quot;, &quot;PerfCase_ceygbjdjul&quot;, &quot;PerfCase_igdacmgfqz&quot;, &quot;PerfCase_iukwoozlrc&quot;, &quot;PerfCase_ivzrdrluou&quot;, &quot;PerfCase_wlqryvewgq&quot;, &quot;PerfCase_iaimpcxafd&quot;, &quot;PerfCase_gadthyhqgg&quot;, &quot;PerfCase_qxoczsitsr&quot;, &quot;PerfCase_rmbxgkgiot&quot;, &quot;PerfCase_orjawzqmjg&quot;, &quot;PerfCase_hetwvmanib&quot;, &quot;PerfCase_zgjfjzcwnn&quot;, &quot;PerfCase_tzzvivzjav&quot;, &quot;PerfCase_ckispkrfoo&quot;, &quot;PerfCase_${v_randomCaseName}&quot;, &quot;PerfCase_oyxxigkjum&quot;, &quot;PerfCase_ndoqimbkqa&quot;, &quot;PerfCase_hnkuwkbkys&quot;, &quot;PerfCase_ejqywcrvsb&quot;, &quot;PerfCase_zfagwluqww&quot;, &quot;PerfCase_yuvdbmzswy&quot;, &quot;PerfCase_mlyorhoopd&quot;, &quot;PerfCase_uzhetavshv&quot;, &quot;PerfCase_tqhajyzsvy&quot;, &quot;PerfCase_lbtuwpzory&quot;, &quot;PerfCase_uzynpivemt&quot;, &quot;PerfCase_peeit &quot;, &quot;PerfCase_cwliojsjrb&quot;, &quot;PerfCase_ovtnlstdzv&quot;, &quot;PerfCase_xfxjrfbeur&quot;, &quot;PerfCase_kzndqgyhlo&quot;, &quot;PerfCase_hfwmazekro&quot;, &quot;PerfCase_ntxjkyuqey&quot;, &quot;PerfCase_gsrnrcbgct&quot;, &quot;PerfCase_jhtwliqnjw&quot;, &quot;PerfCase_phjjocmnjx&quot;, &quot;PerfCase_vblpezsmiy&quot;, &quot;PerfCase_engipgleox&quot;, &quot;PerfCase_yyvojecpyq&quot;, &quot;PerfCase_cijysyeylg&quot;, &quot;PerfCase_upoenfguvk&quot;, &quot;PerfCase_hbsvpafnxe&quot;, &quot;PerfCase_behybefkgo&quot;, &quot;PerfCase_fngvoeiopo&quot;, &quot;PerfCase_ikzvqqgued&quot;, &quot;PerfCase_kecpetoihi&quot;, &quot;PerfCase_xhsox &quot;, &quot;PerfCase_qnvycfsqca&quot;, &quot;PerfCase_fxzxwabxox&quot;, &quot;PerfCase_icdcfgvpnm&quot;, &quot;PerfCase_wgbpnukguc&quot;, &quot;PerfCase_tbmvqdpufl&quot;, &quot;PerfCase_aqfijcyjse&quot;, &quot;PerfCase_ogtyjhnxzn&quot;, &quot;PerfCase_arjxdvlfcw&quot;, &quot;PerfCase_mdijylxukc&quot;, &quot;PerfCase_skxccddmcp&quot;, &quot;PerfCase_otvmlikxsx&quot;, &quot;PerfCase_vcdefvrqax&quot;, &quot;PerfCase_zysnmagcqw&quot;, &quot;PerfCase_spqjobwugk&quot;, &quot;PerfCase_gyhccyscvl&quot;, &quot;PerfCase_kfctnclkel&quot;, &quot;PerfCase_jdjnhlonmw&quot;, &quot;PerfCase_nijfugpmop&quot;, &quot;PerfCase_hayjzmacqc&quot;, &quot;PerfCase_hzorwmfoiy&quot;, &quot;PerfCase_ndkeeteuag&quot;, &quot;PerfCase_tnhfmhksbc&quot;, &quot;PerfCase_shptdsdrnd&quot;, &quot;PerfCase_wqbukantsp&quot;, &quot;PerfCase_njuricehaw&quot;, &quot;PerfCase_ahsnkslkqy&quot;, &quot;PerfCase_wimvctellq&quot;, &quot;PerfCase_bdsxwybail&quot;, &quot;PerfCase_grdowldhwe&quot;, &quot;PerfCase_prpikssxfp&quot;, &quot;PerfCase_qfgydxlidm&quot;, &quot;PerfCase_gbegkkqfes&quot;, &quot;PerfCase_jnewycrmjc&quot;, &quot;PerfCase_wxsfheczrm&quot;, &quot;PerfCase_sooemovqtd&quot;, &quot;PerfCase_bjvjhhzjhn&quot;, &quot;PerfCase_vzrsmsrjjp&quot;, &quot;PerfCase_cshbjcbtna&quot;, &quot;PerfCase_uwifvpfycw&quot;, &quot;PerfCase_qwebzewmfl&quot;, &quot;PerfCase_dzxdgnbthj&quot;, &quot;PerfCase_yqlewwbalo&quot;, &quot;PerfCase_yzjkupwhtt&quot;, &quot;PerfCase_zrfifwmnix&quot;, &quot;PerfCase_zrgvyjqval&quot;, &quot;PerfCase_hnvhynnozm&quot;, &quot;PerfCase_bvxwhdxmmi&quot;, &quot;PerfCase_dpffdupjdd&quot;, &quot;PerfCase_xntgoypyuq&quot;, &quot;PerfCase_wfgswdjaqt&quot;, &quot;PerfCase_thjjucvdyt&quot;, &quot;PerfCase_jpqlcizvuz&quot;, &quot;PerfCase_gqbtlgjguv&quot;, &quot;PerfCase_yicbmkwdxa&quot;, &quot;PerfCase_dtoijohyul&quot;, &quot;PerfCase_ngegasgdub&quot;, &quot;PerfCase_whcqsiysdv&quot;, &quot;PerfCase_enbwfgxfae&quot;, &quot;PerfCase_lwaqx &quot;, &quot;PerfCase_vvpcc &quot;, &quot;PerfCase_mfsdjefnsa&quot;, &quot;PerfCase_enxmojlmom&quot;, &quot;PerfCase_ogrub &quot;, &quot;PerfCase_zvieh &quot;, &quot;PerfCase_orrdz &quot;, &quot;PerfCase_kiimvntkoq&quot;, &quot;PerfCase_dfnbascfjt&quot;, &quot;PerfCase_bqoloxjgmr&quot;, &quot;PerfCase_lvknbtpjkk&quot;, &quot;PerfCase_ejcpbcgaoy&quot;, &quot;PerfCase_kelwxlwmqk&quot;, &quot;PerfCase_wrjujrcwro&quot;, &quot;PerfCase_kxxvctxdhp&quot;, &quot;PerfCase_ngtrxwdukf&quot;, &quot;PerfCase_qmeeqdynxt&quot;, &quot;PerfCase_opuyzkgnhb&quot;, &quot;PerfCase_icdbeqxlsg&quot;, &quot;PerfCase_sbpqcslyes&quot;, &quot;PerfCase_tzaefvjtoh&quot;, &quot;PerfCase_watoritrna&quot;, &quot;PerfCase_corjblmcbf&quot;, &quot;PerfCase_suywmzwfnc&quot;, &quot;PerfCase_vtxaqobhal&quot;, &quot;PerfCase_tbagyeryys&quot;, &quot;PerfCase_satxzmosjx&quot;, &quot;PerfCase_felivlmqxw&quot;, &quot;PerfCase_sspqcyhzbo&quot;, &quot;PerfCase_kbpksssspd&quot;, &quot;PerfCase_fcnkjmezud&quot;, &quot;PerfCase_mewugkrusf&quot;, &quot;PerfCase_bbasisecvb&quot;, &quot;PerfCase_jemixctfel&quot;, &quot;PerfCase_htlwuttjej&quot;, &quot;PerfCase_icrjpatark&quot;, &quot;PerfCase_fyhmlcinpe&quot;, &quot;PerfCase_wwmlxmmmsi&quot;, &quot;PerfCase_btxbacjtmi&quot;, &quot;PerfCase_qhqzidxzng&quot;, &quot;PerfCase_wrbsaqhuuq&quot;, &quot;PerfCase_bfzuoisjxq&quot;, &quot;PerfCase_cumolwnimw&quot;, &quot;PerfCase_mllmnqzigq&quot;, &quot;PerfCase_scmoqaqvyz&quot;, &quot;PerfCase_bqqxafpmjl&quot;, &quot;PerfCase_anexgxdrsk&quot;, &quot;PerfCase_iqmrowzclw&quot;, &quot;PerfCase_imglxekrec&quot;, &quot;PerfCase_zmoohriesv&quot;, &quot;PerfCase_huwykwtclk&quot;, &quot;PerfCase_skwakriqtb&quot;, &quot;PerfCase_ppryexcvbo&quot;, &quot;PerfCase_jmxdoaoekh&quot;, &quot;PerfCase_xblqoaqcja&quot;, &quot;PerfCase_rqvcbnbjww&quot;, &quot;PerfCase_gmtgxnvwfp&quot;, &quot;PerfCase_izyqucdkpu&quot;, &quot;PerfCase_qfqnjqnvfp&quot;, &quot;PerfCase_xritdwtqnd&quot;, &quot;PerfCase_hzuhfnmzep&quot;, &quot;PerfCase_iokqsmhkuc&quot;, &quot;PerfCase_xodotccmbu&quot;, &quot;PerfCase_bdfkawmrsn&quot;, &quot;PerfCase_pxpbwnvunb&quot;, &quot;PerfCase_ivaktemgaf&quot;, &quot;PerfCase_nelizqvlzd&quot;, &quot;PerfCase_zvgeszznih&quot;, &quot;PerfCase_igfcrblwzq&quot;, &quot;PerfCase_bnbjzpzmxf&quot;, &quot;PerfCase_ygwpvgjxsa&quot;, &quot;PerfCase_ljjhyfzbvr&quot;, &quot;PerfCase_nlrglbrrlt&quot;, &quot;PerfCase_msjslovpgb&quot;, &quot;PerfCase_bwtoydgatt&quot;, &quot;PerfCase_dspfwvtbvi&quot;, &quot;PerfCase_mzvponzfic&quot;, &quot;PerfCase_pksfawvtvp&quot;, &quot;PerfCase_bygrvpoxqr&quot;, &quot;PerfCase_yotbcxglij&quot;, &quot;PerfCase_xpyogggyyi&quot;, &quot;PerfCase_fpqofsmkdl&quot;, &quot;PerfCase_cetbdnlhku&quot;, &quot;PerfCase_tjtoitizol&quot;, &quot;PerfCase_isxhblxdpx&quot;, &quot;PerfCase_wcsoevqfym&quot;, &quot;PerfCase_gxllvjsljq&quot;, &quot;PerfCase_cubhxgnkxw&quot;, &quot;PerfCase_vumuwxlmfw&quot;, &quot;PerfCase_bkvgfhhesh&quot;, &quot;PerfCase_hcfbavxdiv&quot;, &quot;PerfCase_haehruujzq&quot;, &quot;PerfCase_wwrvjqptjm&quot;, &quot;PerfCase_zoqegwsihs&quot;, &quot;PerfCase_ybhsmlbmwq&quot;, &quot;PerfCase_vokbxxcosf&quot;, &quot;PerfCase_wcwxzthzdg&quot;, &quot;PerfCase_fnvzatrrfo&quot;, &quot;PerfCase_rhiwguvtxu&quot;, &quot;PerfCase_gtzsfodtyw&quot;, &quot;PerfCase_hgfvbsbkyr&quot;, &quot;PerfCase_jzfhwknfdg&quot;, &quot;PerfCase_cvpcdpbtre&quot;, &quot;PerfCase_hiwgyxtyjr&quot;, &quot;PerfCase_cvabioocqb&quot;, &quot;PerfCase_lrjmmzmrpd&quot;, &quot;PerfCase_zpgkndgqga&quot;, &quot;PerfCase_ryfcivuzqk&quot;, &quot;PerfCase_uvvzcmvluq&quot;, &quot;PerfCase_bzuypfinuy&quot;, &quot;PerfCase_kypcjhjszr&quot;, &quot;PerfCase_vifybpluwf&quot;, &quot;PerfCase_nacbafigoy&quot;, &quot;PerfCase_xvithngdde&quot;, &quot;PerfCase_eplpsjiuhm&quot;, &quot;PerfCase_rxgkkqtqrl&quot;, &quot;PerfCase_ubpzsprbrq&quot;, &quot;PerfCase_xvurrreqlk&quot;, &quot;PerfCase_nmwhnzhnwc&quot;, &quot;PerfCase_annroiakrq&quot;, &quot;PerfCase_ucfoirioio&quot;, &quot;PerfCase_uddfryxnsg&quot;, &quot;PerfCase_qptmvzclml&quot;, &quot;PerfCase_otznoqtmgs&quot;, &quot;PerfCase_xwlbczscdq&quot;, &quot;PerfCase_dajdrhwlhq&quot;, &quot;PerfCase_qlizkrhvin&quot;, &quot;PerfCase_nlhypmddnq&quot;, &quot;PerfCase_yunwvtqzag&quot;, &quot;PerfCase_hubnhhesft&quot;, &quot;PerfCase_bofxcwzqtm&quot;, &quot;PerfCase_cnipexpmpg&quot;, &quot;PerfCase_pjvcdceixt&quot;, &quot;PerfCase_avvhpyujdm&quot;, &quot;PerfCase_nkpdiocwnb&quot;, &quot;PerfCase_bmvuahuwuw&quot;, &quot;PerfCase_gssfxfpmnx&quot;, &quot;PerfCase_qjghjjkqrs&quot;, &quot;PerfCase_xyvolwpduv&quot;, &quot;PerfCase_adefnxgyqw&quot;, &quot;PerfCase_ufacqlvjdx&quot;, &quot;PerfCase_hweijclzta&quot;, &quot;PerfCase_zlfvqldijk&quot;, &quot;PerfCase_tqybiftbco&quot;, &quot;PerfCase_xhdnzyrlnf&quot;, &quot;PerfCase_ljeunjmnfj&quot;, &quot;PerfCase_gyxnquejmy&quot;, &quot;PerfCase_dfathrgxac&quot;, &quot;PerfCase_bmlxucanmh&quot;, &quot;PerfCase_whekywcoop&quot;, &quot;PerfCase_eltzewvjvw&quot;, &quot;PerfCase_wpmhrsswcv&quot;, &quot;PerfCase_ppdxtkokpe&quot;, &quot;PerfCase_gktufkkwpf&quot;, &quot;PerfCase_biodpteibl&quot;, &quot;PerfCase_idpiilvuum&quot;, &quot;PerfCase_zfrcgpyibm&quot;, &quot;PerfCase_dnwigyygzm&quot;, &quot;PerfCase_wbzmvfprmw&quot;, &quot;PerfCase_jyhsvwgegg&quot;, &quot;PerfCase_bcfsmfysmk&quot;, &quot;PerfCase_clusnmzwpo&quot;, &quot;PerfCase_nsvirtfywv&quot;, &quot;PerfCase_yheupqnynn&quot;, &quot;PerfCase_gobsjbslzc&quot;, &quot;PerfCase_rfmgoihtqc&quot;, &quot;PerfCase_qepgnejudj&quot;, &quot;PerfCase_bqnoweurby&quot;, &quot;PerfCase_hgygouxzvv&quot;, &quot;PerfCase_hnkhdwkprd&quot;, &quot;PerfCase_tafdqcabbm&quot;, &quot;PerfCase_baljebddxw&quot;, &quot;PerfCase_sxazaozblj&quot;, &quot;PerfCase_aetydiolgw&quot;, &quot;PerfCase_kvzwxmuoyv&quot;, &quot;PerfCase_xheerhttdc&quot;, &quot;PerfCase_ekgurvuamw&quot;, &quot;PerfCase_bniqaufamw&quot;, &quot;PerfCase_sxlwswynpm&quot;, &quot;PerfCase_vbizisyxre&quot;, &quot;PerfCase_tmbsjqzkqi&quot;, &quot;PerfCase_wzwaraepdq&quot;, &quot;PerfCase_ubzljniwne&quot;, &quot;PerfCase_nqtsxkjuqp&quot;, &quot;PerfCase_wommuritsp&quot;, &quot;PerfCase_mwubxzrela&quot;, &quot;PerfCase_txoaouqmix&quot;, &quot;PerfCase_jvtbjtbgpn&quot;, &quot;PerfCase_hadgqwlxaj&quot;, &quot;PerfCase_ivixrsdcgz&quot;, &quot;PerfCase_cbphggwply&quot;, &quot;PerfCase_unskervhlo&quot;, &quot;PerfCase_anwgmkhzuz&quot;, &quot;PerfCase_mfevnardmy&quot;, &quot;PerfCase_ymaqyfblmb&quot;, &quot;PerfCase_clqffjnhhr&quot;, &quot;PerfCase_ogpgrcsexo&quot;, &quot;PerfCase_htkughmwzs&quot;, &quot;PerfCase_zhrrauvqps&quot;, &quot;PerfCase_iodwbmhxkv&quot;, &quot;PerfCase_jyxiupized&quot;, &quot;PerfCase_zyjsnoxpem&quot;, &quot;PerfCase_gfkwarlzhw&quot;, &quot;PerfCase_fihduipjhg&quot;, &quot;PerfCase_gmkajkscqv&quot;, &quot;PerfCase_cvxxqupwrw&quot;]  }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="HTTPArgument.content_type">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">audios</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Content-Disposition: form-data; name=&quot;transcript&quot;; filename=&quot;SampleDoc.docx&quot; </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${ex_accessToken}</stringProp>
              </elementProp>
              <elementProp name="x-dtpc" elementType="Header">
                <stringProp name="Header.name">x-dtpc</stringProp>
                <stringProp name="Header.value">4$261474838_978h17vTCFUIAKFURHHRNPPCOHSKQRRHRBMNCRU-0e0</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Darts - Api - POST - Audio - 450" enabled="false">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${TEST_DATA}${FILE_TO_UPLOAD}" elementType="HTTPFileArg">
                <stringProp name="File.path">${TEST_DATA}${FILE_TO_UPLOAD}</stringProp>
                <stringProp name="File.paramname">file</stringProp>
                <stringProp name="File.mimetype">audio/mpeg</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="metadata" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">metadata</stringProp>
                <stringProp name="Argument.value"> {    &quot;started_at&quot;: &quot;${v_randomdates}&quot;,    &quot;ended_at&quot;: &quot;${v_randomdates1hour}&quot;,    &quot;channel&quot;: 1,    &quot;total_channels&quot;: 1,    &quot;format&quot;: &quot;mp2&quot;,    &quot;filename&quot;: &quot;sample.mp2&quot;,    &quot;courthouse&quot;: &quot;PerfCourtHouse01&quot;,    &quot;courtroom&quot;: &quot;PerfCourtroom01&quot;,    &quot;file_size&quot;: 937.96,    &quot;checksum&quot;: &quot;TVRMwq16b4mcZwPSlZj/iQ==&quot;,    &quot;cases&quot;: [      &quot;PerfCase_ffnmuwptvb &quot;, &quot;PerfCase_iqnxkzjbnu&quot;, &quot;PerfCase_hglqumjowi&quot;, &quot;PerfCase_zkvrynklmo&quot;, &quot;PerfCase_azsbo &quot;, &quot;PerfCase_xqbnwqtepk &quot;, &quot;PerfCase_fcjqhwcsln&quot;, &quot;PerfCase_bxwsvcthuf&quot;, &quot;PerfCase_ihuezpfcnt&quot;, &quot;PerfCase_rcavfcojrl&quot;, &quot;PerfCase_lcczappwla&quot;, &quot;PerfCase_papmcousnz&quot;, &quot;PerfCase_mgconwpwoy&quot;, &quot;PerfCase_mwlwldddcg&quot;, &quot;PerfCase_glquggjcwt&quot;, &quot;PerfCase_yhzhmypvhe&quot;, &quot;PerfCase_hrrwszfvzl&quot;, &quot;PerfCase_${ex_randomCaseName}&quot;, &quot;PerfCase_gcmwdhsvao&quot;, &quot;PerfCase_uzhrrzjqup&quot;, &quot;PerfCase_vnblpapaay&quot;, &quot;PerfCase_wysnxpsvgw&quot;, &quot;PerfCase_wrwzpjlpbw&quot;, &quot;PerfCase_jkrfvkerhp&quot;, &quot;PerfCase_taqtwbghnm&quot;, &quot;PerfCase_fkxkfnhseh&quot;, &quot;PerfCase_dcxprfjczn&quot;, &quot;PerfCase_qumettnbxb&quot;, &quot;PerfCase_sjowqsfydn&quot;, &quot;PerfCase_quwweoqzce&quot;, &quot;PerfCase_waawcgizni&quot;, &quot;PerfCase_slqfaoqmml&quot;, &quot;PerfCase_uzwxnxupzh&quot;, &quot;PerfCase_rqrmdxdgqv&quot;, &quot;PerfCase_kjtdzfhuse&quot;, &quot;PerfCase_nicbbbnphw&quot;, &quot;PerfCase_dxhvfstzfb&quot;, &quot;PerfCase_qvffjoovik&quot;, &quot;PerfCase_kvpjszraxa&quot;, &quot;PerfCase_yvopwwteuy&quot;, &quot;PerfCase_pbfmzrqobk&quot;, &quot;PerfCase_wprmwacfyn&quot;, &quot;PerfCase_sofwmcotpy&quot;, &quot;PerfCase_rwpfnjxxdv&quot;, &quot;PerfCase_japtdjwvab&quot;, &quot;PerfCase_egfdnjokno&quot;, &quot;PerfCase_odglhbuzsr&quot;, &quot;PerfCase_nsemcvowox&quot;, &quot;PerfCase_ywkgaaoypy&quot;, &quot;PerfCase_nrmbauuvau&quot;, &quot;PerfCase_nayhyukupn&quot;, &quot;PerfCase_pzgoduksej&quot;, &quot;PerfCase_rhvtjzcrhc&quot;, &quot;PerfCase_tbxulknbqg&quot;, &quot;PerfCase_mwepwbcihr&quot;, &quot;PerfCase_kxtbkielkl&quot;, &quot;PerfCase_znfdinmzbi&quot;, &quot;PerfCase_mpkxmtdkfm&quot;, &quot;PerfCase_hmesqdhinh&quot;, &quot;PerfCase_yzzedilzyk&quot;, &quot;PerfCase_fhvwymzyer&quot;, &quot;PerfCase_rgmoxzkvnt&quot;, &quot;PerfCase_acaptuoiyo&quot;, &quot;PerfCase_tslbzwouag&quot;, &quot;PerfCase_qxisgvrrgb&quot;, &quot;PerfCase_gnzszwrlvy&quot;, &quot;PerfCase_ocsnukqamy&quot;, &quot;PerfCase_tbrgpuwbya&quot;, &quot;PerfCase_omunjcelxv&quot;, &quot;PerfCase_aqecrtrxbq&quot;, &quot;PerfCase_cvenryltzx&quot;, &quot;PerfCase_exmrboggnv&quot;, &quot;PerfCase_iybwzrzojp&quot;, &quot;PerfCase_qsolxvgsrz&quot;, &quot;PerfCase_orqauvgbwy&quot;, &quot;PerfCase_dtlfgdswya&quot;, &quot;PerfCase_vlbvqxysdx&quot;, &quot;PerfCase_rykxjdrqgi&quot;, &quot;PerfCase_kjfuqggbsk&quot;, &quot;PerfCase_gumjeyvsoe&quot;, &quot;PerfCase_mobsezgpub&quot;, &quot;PerfCase_ohrmxbssle&quot;, &quot;PerfCase_dlrhvkrsci&quot;, &quot;PerfCase_jgbyhupzpp&quot;, &quot;PerfCase_dhtbqcxpjc&quot;, &quot;PerfCase_xoystgbtqj&quot;, &quot;PerfCase_joqnzorrof&quot;, &quot;PerfCase_zsbitdjgbo&quot;, &quot;PerfCase_psnajgvfxt&quot;, &quot;PerfCase_ceygbjdjul&quot;, &quot;PerfCase_igdacmgfqz&quot;, &quot;PerfCase_iukwoozlrc&quot;, &quot;PerfCase_ivzrdrluou&quot;, &quot;PerfCase_wlqryvewgq&quot;, &quot;PerfCase_iaimpcxafd&quot;, &quot;PerfCase_gadthyhqgg&quot;, &quot;PerfCase_qxoczsitsr&quot;, &quot;PerfCase_rmbxgkgiot&quot;, &quot;PerfCase_orjawzqmjg&quot;, &quot;PerfCase_hetwvmanib&quot;, &quot;PerfCase_zgjfjzcwnn&quot;, &quot;PerfCase_tzzvivzjav&quot;, &quot;PerfCase_ckispkrfoo&quot;, &quot;PerfCase_${v_randomCaseName}&quot;, &quot;PerfCase_oyxxigkjum&quot;, &quot;PerfCase_ndoqimbkqa&quot;, &quot;PerfCase_hnkuwkbkys&quot;, &quot;PerfCase_ejqywcrvsb&quot;, &quot;PerfCase_zfagwluqww&quot;, &quot;PerfCase_yuvdbmzswy&quot;, &quot;PerfCase_mlyorhoopd&quot;, &quot;PerfCase_uzhetavshv&quot;, &quot;PerfCase_tqhajyzsvy&quot;, &quot;PerfCase_lbtuwpzory&quot;, &quot;PerfCase_uzynpivemt&quot;, &quot;PerfCase_peeit &quot;, &quot;PerfCase_cwliojsjrb&quot;, &quot;PerfCase_ovtnlstdzv&quot;, &quot;PerfCase_xfxjrfbeur&quot;, &quot;PerfCase_kzndqgyhlo&quot;, &quot;PerfCase_hfwmazekro&quot;, &quot;PerfCase_ntxjkyuqey&quot;, &quot;PerfCase_gsrnrcbgct&quot;, &quot;PerfCase_jhtwliqnjw&quot;, &quot;PerfCase_phjjocmnjx&quot;, &quot;PerfCase_vblpezsmiy&quot;, &quot;PerfCase_engipgleox&quot;, &quot;PerfCase_yyvojecpyq&quot;, &quot;PerfCase_cijysyeylg&quot;, &quot;PerfCase_upoenfguvk&quot;, &quot;PerfCase_hbsvpafnxe&quot;, &quot;PerfCase_behybefkgo&quot;, &quot;PerfCase_fngvoeiopo&quot;, &quot;PerfCase_ikzvqqgued&quot;, &quot;PerfCase_kecpetoihi&quot;, &quot;PerfCase_xhsox &quot;, &quot;PerfCase_qnvycfsqca&quot;, &quot;PerfCase_fxzxwabxox&quot;, &quot;PerfCase_icdcfgvpnm&quot;, &quot;PerfCase_wgbpnukguc&quot;, &quot;PerfCase_tbmvqdpufl&quot;, &quot;PerfCase_aqfijcyjse&quot;, &quot;PerfCase_ogtyjhnxzn&quot;, &quot;PerfCase_arjxdvlfcw&quot;, &quot;PerfCase_mdijylxukc&quot;, &quot;PerfCase_skxccddmcp&quot;, &quot;PerfCase_otvmlikxsx&quot;, &quot;PerfCase_vcdefvrqax&quot;, &quot;PerfCase_zysnmagcqw&quot;, &quot;PerfCase_spqjobwugk&quot;, &quot;PerfCase_gyhccyscvl&quot;, &quot;PerfCase_kfctnclkel&quot;, &quot;PerfCase_jdjnhlonmw&quot;, &quot;PerfCase_nijfugpmop&quot;, &quot;PerfCase_hayjzmacqc&quot;, &quot;PerfCase_hzorwmfoiy&quot;, &quot;PerfCase_ndkeeteuag&quot;, &quot;PerfCase_tnhfmhksbc&quot;, &quot;PerfCase_shptdsdrnd&quot;, &quot;PerfCase_wqbukantsp&quot;, &quot;PerfCase_njuricehaw&quot;, &quot;PerfCase_ahsnkslkqy&quot;, &quot;PerfCase_wimvctellq&quot;, &quot;PerfCase_bdsxwybail&quot;, &quot;PerfCase_grdowldhwe&quot;, &quot;PerfCase_prpikssxfp&quot;, &quot;PerfCase_qfgydxlidm&quot;, &quot;PerfCase_gbegkkqfes&quot;, &quot;PerfCase_jnewycrmjc&quot;, &quot;PerfCase_wxsfheczrm&quot;, &quot;PerfCase_sooemovqtd&quot;, &quot;PerfCase_bjvjhhzjhn&quot;, &quot;PerfCase_vzrsmsrjjp&quot;, &quot;PerfCase_cshbjcbtna&quot;, &quot;PerfCase_uwifvpfycw&quot;, &quot;PerfCase_qwebzewmfl&quot;, &quot;PerfCase_dzxdgnbthj&quot;, &quot;PerfCase_yqlewwbalo&quot;, &quot;PerfCase_yzjkupwhtt&quot;, &quot;PerfCase_zrfifwmnix&quot;, &quot;PerfCase_zrgvyjqval&quot;, &quot;PerfCase_hnvhynnozm&quot;, &quot;PerfCase_bvxwhdxmmi&quot;, &quot;PerfCase_dpffdupjdd&quot;, &quot;PerfCase_xntgoypyuq&quot;, &quot;PerfCase_wfgswdjaqt&quot;, &quot;PerfCase_thjjucvdyt&quot;, &quot;PerfCase_jpqlcizvuz&quot;, &quot;PerfCase_gqbtlgjguv&quot;, &quot;PerfCase_yicbmkwdxa&quot;, &quot;PerfCase_dtoijohyul&quot;, &quot;PerfCase_ngegasgdub&quot;, &quot;PerfCase_whcqsiysdv&quot;, &quot;PerfCase_enbwfgxfae&quot;, &quot;PerfCase_lwaqx &quot;, &quot;PerfCase_vvpcc &quot;, &quot;PerfCase_mfsdjefnsa&quot;, &quot;PerfCase_enxmojlmom&quot;, &quot;PerfCase_ogrub &quot;, &quot;PerfCase_zvieh &quot;, &quot;PerfCase_orrdz &quot;, &quot;PerfCase_kiimvntkoq&quot;, &quot;PerfCase_dfnbascfjt&quot;, &quot;PerfCase_bqoloxjgmr&quot;, &quot;PerfCase_lvknbtpjkk&quot;, &quot;PerfCase_ejcpbcgaoy&quot;, &quot;PerfCase_kelwxlwmqk&quot;, &quot;PerfCase_wrjujrcwro&quot;, &quot;PerfCase_kxxvctxdhp&quot;, &quot;PerfCase_ngtrxwdukf&quot;, &quot;PerfCase_qmeeqdynxt&quot;, &quot;PerfCase_opuyzkgnhb&quot;, &quot;PerfCase_icdbeqxlsg&quot;, &quot;PerfCase_sbpqcslyes&quot;, &quot;PerfCase_tzaefvjtoh&quot;, &quot;PerfCase_watoritrna&quot;, &quot;PerfCase_corjblmcbf&quot;, &quot;PerfCase_suywmzwfnc&quot;, &quot;PerfCase_vtxaqobhal&quot;, &quot;PerfCase_tbagyeryys&quot;, &quot;PerfCase_satxzmosjx&quot;, &quot;PerfCase_felivlmqxw&quot;, &quot;PerfCase_sspqcyhzbo&quot;, &quot;PerfCase_kbpksssspd&quot;, &quot;PerfCase_fcnkjmezud&quot;, &quot;PerfCase_mewugkrusf&quot;, &quot;PerfCase_bbasisecvb&quot;, &quot;PerfCase_jemixctfel&quot;, &quot;PerfCase_htlwuttjej&quot;, &quot;PerfCase_icrjpatark&quot;, &quot;PerfCase_fyhmlcinpe&quot;, &quot;PerfCase_wwmlxmmmsi&quot;, &quot;PerfCase_btxbacjtmi&quot;, &quot;PerfCase_qhqzidxzng&quot;, &quot;PerfCase_wrbsaqhuuq&quot;, &quot;PerfCase_bfzuoisjxq&quot;, &quot;PerfCase_cumolwnimw&quot;, &quot;PerfCase_mllmnqzigq&quot;, &quot;PerfCase_scmoqaqvyz&quot;, &quot;PerfCase_bqqxafpmjl&quot;, &quot;PerfCase_anexgxdrsk&quot;, &quot;PerfCase_iqmrowzclw&quot;, &quot;PerfCase_imglxekrec&quot;, &quot;PerfCase_zmoohriesv&quot;, &quot;PerfCase_huwykwtclk&quot;, &quot;PerfCase_skwakriqtb&quot;, &quot;PerfCase_ppryexcvbo&quot;, &quot;PerfCase_jmxdoaoekh&quot;, &quot;PerfCase_xblqoaqcja&quot;, &quot;PerfCase_rqvcbnbjww&quot;, &quot;PerfCase_gmtgxnvwfp&quot;, &quot;PerfCase_izyqucdkpu&quot;, &quot;PerfCase_qfqnjqnvfp&quot;, &quot;PerfCase_xritdwtqnd&quot;, &quot;PerfCase_hzuhfnmzep&quot;, &quot;PerfCase_iokqsmhkuc&quot;, &quot;PerfCase_xodotccmbu&quot;, &quot;PerfCase_bdfkawmrsn&quot;, &quot;PerfCase_pxpbwnvunb&quot;, &quot;PerfCase_ivaktemgaf&quot;, &quot;PerfCase_nelizqvlzd&quot;, &quot;PerfCase_zvgeszznih&quot;, &quot;PerfCase_igfcrblwzq&quot;, &quot;PerfCase_bnbjzpzmxf&quot;, &quot;PerfCase_ygwpvgjxsa&quot;, &quot;PerfCase_ljjhyfzbvr&quot;, &quot;PerfCase_nlrglbrrlt&quot;, &quot;PerfCase_msjslovpgb&quot;, &quot;PerfCase_bwtoydgatt&quot;, &quot;PerfCase_dspfwvtbvi&quot;, &quot;PerfCase_mzvponzfic&quot;, &quot;PerfCase_pksfawvtvp&quot;, &quot;PerfCase_bygrvpoxqr&quot;, &quot;PerfCase_yotbcxglij&quot;, &quot;PerfCase_xpyogggyyi&quot;, &quot;PerfCase_fpqofsmkdl&quot;, &quot;PerfCase_cetbdnlhku&quot;, &quot;PerfCase_tjtoitizol&quot;, &quot;PerfCase_isxhblxdpx&quot;, &quot;PerfCase_wcsoevqfym&quot;, &quot;PerfCase_gxllvjsljq&quot;, &quot;PerfCase_cubhxgnkxw&quot;, &quot;PerfCase_vumuwxlmfw&quot;, &quot;PerfCase_bkvgfhhesh&quot;, &quot;PerfCase_hcfbavxdiv&quot;, &quot;PerfCase_haehruujzq&quot;, &quot;PerfCase_wwrvjqptjm&quot;, &quot;PerfCase_zoqegwsihs&quot;, &quot;PerfCase_ybhsmlbmwq&quot;, &quot;PerfCase_vokbxxcosf&quot;, &quot;PerfCase_wcwxzthzdg&quot;, &quot;PerfCase_fnvzatrrfo&quot;, &quot;PerfCase_rhiwguvtxu&quot;, &quot;PerfCase_gtzsfodtyw&quot;, &quot;PerfCase_hgfvbsbkyr&quot;, &quot;PerfCase_jzfhwknfdg&quot;, &quot;PerfCase_cvpcdpbtre&quot;, &quot;PerfCase_hiwgyxtyjr&quot;, &quot;PerfCase_cvabioocqb&quot;, &quot;PerfCase_lrjmmzmrpd&quot;, &quot;PerfCase_zpgkndgqga&quot;, &quot;PerfCase_ryfcivuzqk&quot;, &quot;PerfCase_uvvzcmvluq&quot;, &quot;PerfCase_bzuypfinuy&quot;, &quot;PerfCase_kypcjhjszr&quot;, &quot;PerfCase_vifybpluwf&quot;, &quot;PerfCase_nacbafigoy&quot;, &quot;PerfCase_xvithngdde&quot;, &quot;PerfCase_eplpsjiuhm&quot;, &quot;PerfCase_rxgkkqtqrl&quot;, &quot;PerfCase_ubpzsprbrq&quot;, &quot;PerfCase_xvurrreqlk&quot;, &quot;PerfCase_nmwhnzhnwc&quot;, &quot;PerfCase_annroiakrq&quot;, &quot;PerfCase_ucfoirioio&quot;, &quot;PerfCase_uddfryxnsg&quot;, &quot;PerfCase_qptmvzclml&quot;, &quot;PerfCase_otznoqtmgs&quot;, &quot;PerfCase_xwlbczscdq&quot;, &quot;PerfCase_dajdrhwlhq&quot;, &quot;PerfCase_qlizkrhvin&quot;, &quot;PerfCase_nlhypmddnq&quot;, &quot;PerfCase_yunwvtqzag&quot;, &quot;PerfCase_hubnhhesft&quot;, &quot;PerfCase_bofxcwzqtm&quot;, &quot;PerfCase_cnipexpmpg&quot;, &quot;PerfCase_pjvcdceixt&quot;, &quot;PerfCase_avvhpyujdm&quot;, &quot;PerfCase_nkpdiocwnb&quot;, &quot;PerfCase_bmvuahuwuw&quot;, &quot;PerfCase_gssfxfpmnx&quot;, &quot;PerfCase_qjghjjkqrs&quot;, &quot;PerfCase_xyvolwpduv&quot;, &quot;PerfCase_adefnxgyqw&quot;, &quot;PerfCase_ufacqlvjdx&quot;, &quot;PerfCase_hweijclzta&quot;, &quot;PerfCase_zlfvqldijk&quot;, &quot;PerfCase_tqybiftbco&quot;, &quot;PerfCase_xhdnzyrlnf&quot;, &quot;PerfCase_ljeunjmnfj&quot;, &quot;PerfCase_gyxnquejmy&quot;, &quot;PerfCase_dfathrgxac&quot;, &quot;PerfCase_bmlxucanmh&quot;, &quot;PerfCase_whekywcoop&quot;, &quot;PerfCase_eltzewvjvw&quot;, &quot;PerfCase_wpmhrsswcv&quot;, &quot;PerfCase_ppdxtkokpe&quot;, &quot;PerfCase_gktufkkwpf&quot;, &quot;PerfCase_biodpteibl&quot;, &quot;PerfCase_idpiilvuum&quot;, &quot;PerfCase_zfrcgpyibm&quot;, &quot;PerfCase_dnwigyygzm&quot;, &quot;PerfCase_wbzmvfprmw&quot;, &quot;PerfCase_jyhsvwgegg&quot;, &quot;PerfCase_bcfsmfysmk&quot;, &quot;PerfCase_clusnmzwpo&quot;, &quot;PerfCase_nsvirtfywv&quot;, &quot;PerfCase_yheupqnynn&quot;, &quot;PerfCase_gobsjbslzc&quot;, &quot;PerfCase_rfmgoihtqc&quot;, &quot;PerfCase_qepgnejudj&quot;, &quot;PerfCase_bqnoweurby&quot;, &quot;PerfCase_hgygouxzvv&quot;, &quot;PerfCase_hnkhdwkprd&quot;, &quot;PerfCase_tafdqcabbm&quot;, &quot;PerfCase_baljebddxw&quot;, &quot;PerfCase_sxazaozblj&quot;, &quot;PerfCase_aetydiolgw&quot;, &quot;PerfCase_kvzwxmuoyv&quot;, &quot;PerfCase_xheerhttdc&quot;, &quot;PerfCase_ekgurvuamw&quot;, &quot;PerfCase_bniqaufamw&quot;, &quot;PerfCase_sxlwswynpm&quot;, &quot;PerfCase_vbizisyxre&quot;, &quot;PerfCase_tmbsjqzkqi&quot;, &quot;PerfCase_wzwaraepdq&quot;, &quot;PerfCase_ubzljniwne&quot;, &quot;PerfCase_nqtsxkjuqp&quot;, &quot;PerfCase_wommuritsp&quot;, &quot;PerfCase_mwubxzrela&quot;, &quot;PerfCase_txoaouqmix&quot;, &quot;PerfCase_jvtbjtbgpn&quot;, &quot;PerfCase_hadgqwlxaj&quot;, &quot;PerfCase_ivixrsdcgz&quot;, &quot;PerfCase_cbphggwply&quot;, &quot;PerfCase_unskervhlo&quot;, &quot;PerfCase_anwgmkhzuz&quot;, &quot;PerfCase_mfevnardmy&quot;, &quot;PerfCase_ymaqyfblmb&quot;, &quot;PerfCase_clqffjnhhr&quot;, &quot;PerfCase_ogpgrcsexo&quot;, &quot;PerfCase_htkughmwzs&quot;, &quot;PerfCase_zhrrauvqps&quot;, &quot;PerfCase_iodwbmhxkv&quot;, &quot;PerfCase_jyxiupized&quot;, &quot;PerfCase_zyjsnoxpem&quot;, &quot;PerfCase_gfkwarlzhw&quot;, &quot;PerfCase_fihduipjhg&quot;, &quot;PerfCase_gmkajkscqv&quot;, &quot;PerfCase_cvxxqupwrw&quot;, &quot;PerfCase_lmhitpzjga&quot;, &quot;PerfCase_vpniylwwms&quot;, &quot;PerfCase_kavvxnvqsn&quot;, &quot;PerfCase_zgwqksjrhu&quot;, &quot;PerfCase_clyhjxqjha&quot;, &quot;PerfCase_urhunjxuqk&quot;, &quot;PerfCase_eikjrhajhy&quot;, &quot;PerfCase_czpaecoqxg&quot;, &quot;PerfCase_jwhthkzmce&quot;, &quot;PerfCase_joqjlsyred&quot;, &quot;PerfCase_xrvdcmlfba&quot;, &quot;PerfCase_kouetqstdv&quot;, &quot;PerfCase_wnckrvabjx&quot;, &quot;PerfCase_kqnhwkwibj&quot;, &quot;PerfCase_rraxgeglzw&quot;, &quot;PerfCase_wmiurauxip&quot;, &quot;PerfCase_wcxjhoyfsx&quot;, &quot;PerfCase_ybegvenshk&quot;, &quot;PerfCase_wzoppnfffw&quot;, &quot;PerfCase_yzmatkldym&quot;, &quot;PerfCase_mjjzqrcxtk&quot;, &quot;PerfCase_zukdeosniq&quot;, &quot;PerfCase_bwmbllfkck&quot;, &quot;PerfCase_ipgexexhzx&quot;, &quot;PerfCase_orxhvrgsrg&quot;, &quot;PerfCase_rnchvxkwpa&quot;, &quot;PerfCase_sldrcckktc&quot;, &quot;PerfCase_whxqvgpmdo&quot;, &quot;PerfCase_pmugcnehsf&quot;, &quot;PerfCase_luwzuctayg&quot;, &quot;PerfCase_gfszqftzvf&quot;, &quot;PerfCase_bhaxwpbtns&quot;, &quot;PerfCase_scwkfftpei&quot;, &quot;PerfCase_gmysjqosbc&quot;, &quot;PerfCase_ebulcskdyq&quot;, &quot;PerfCase_bgagaldoil&quot;, &quot;PerfCase_mpebntxtmw&quot;, &quot;PerfCase_qxiwvljfqh&quot;, &quot;PerfCase_zaftbnbswd&quot;, &quot;PerfCase_tnflbdvetw&quot;, &quot;PerfCase_idiocubdrw&quot;, &quot;PerfCase_oyqnqpzhrx&quot;, &quot;PerfCase_gzxcsgysro&quot;, &quot;PerfCase_mybkdrzwba&quot;, &quot;PerfCase_snlvnoulhn&quot;, &quot;PerfCase_pwnodqyqwa&quot;, &quot;PerfCase_oomhdgbjzd&quot;, &quot;PerfCase_lwghagygzh&quot;, &quot;PerfCase_bmwjnqveng&quot;, &quot;PerfCase_agrvbayxhc&quot;]  }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="HTTPArgument.content_type">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">audios</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Content-Disposition: form-data; name=&quot;transcript&quot;; filename=&quot;SampleDoc.docx&quot; </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${ex_accessToken}</stringProp>
              </elementProp>
              <elementProp name="x-dtpc" elementType="Header">
                <stringProp name="Header.name">x-dtpc</stringProp>
                <stringProp name="Header.value">4$261474838_978h17vTCFUIAKFURHHRNPPCOHSKQRRHRBMNCRU-0e0</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Darts - Api - POST - Audio - 500 Cases" enabled="false">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${TEST_DATA}${FILE_TO_UPLOAD}" elementType="HTTPFileArg">
                <stringProp name="File.path">${TEST_DATA}${FILE_TO_UPLOAD}</stringProp>
                <stringProp name="File.paramname">file</stringProp>
                <stringProp name="File.mimetype">audio/mpeg</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="metadata" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">metadata</stringProp>
                <stringProp name="Argument.value"> {    &quot;started_at&quot;: &quot;${v_randomdates}&quot;,    &quot;ended_at&quot;: &quot;${v_randomdates1hour}&quot;,    &quot;channel&quot;: 1,    &quot;total_channels&quot;: 1,    &quot;format&quot;: &quot;mp2&quot;,    &quot;filename&quot;: &quot;sample.mp2&quot;,    &quot;courthouse&quot;: &quot;PerfCourtHouse01&quot;,    &quot;courtroom&quot;: &quot;PerfCourtroom01&quot;,    &quot;file_size&quot;: 937.96,    &quot;checksum&quot;: &quot;TVRMwq16b4mcZwPSlZj/iQ==&quot;,    &quot;cases&quot;: [      &quot;PerfCase_ffnmuwptvb &quot;, &quot;PerfCase_iqnxkzjbnu&quot;, &quot;PerfCase_hglqumjowi&quot;, &quot;PerfCase_zkvrynklmo&quot;, &quot;PerfCase_azsbo &quot;, &quot;PerfCase_xqbnwqtepk &quot;, &quot;PerfCase_fcjqhwcsln&quot;, &quot;PerfCase_bxwsvcthuf&quot;, &quot;PerfCase_ihuezpfcnt&quot;, &quot;PerfCase_rcavfcojrl&quot;, &quot;PerfCase_lcczappwla&quot;, &quot;PerfCase_papmcousnz&quot;, &quot;PerfCase_mgconwpwoy&quot;, &quot;PerfCase_mwlwldddcg&quot;, &quot;PerfCase_glquggjcwt&quot;, &quot;PerfCase_yhzhmypvhe&quot;, &quot;PerfCase_hrrwszfvzl&quot;, &quot;PerfCase_${ex_randomCaseName}&quot;, &quot;PerfCase_gcmwdhsvao&quot;, &quot;PerfCase_uzhrrzjqup&quot;, &quot;PerfCase_vnblpapaay&quot;, &quot;PerfCase_wysnxpsvgw&quot;, &quot;PerfCase_wrwzpjlpbw&quot;, &quot;PerfCase_jkrfvkerhp&quot;, &quot;PerfCase_taqtwbghnm&quot;, &quot;PerfCase_fkxkfnhseh&quot;, &quot;PerfCase_dcxprfjczn&quot;, &quot;PerfCase_qumettnbxb&quot;, &quot;PerfCase_sjowqsfydn&quot;, &quot;PerfCase_quwweoqzce&quot;, &quot;PerfCase_waawcgizni&quot;, &quot;PerfCase_slqfaoqmml&quot;, &quot;PerfCase_uzwxnxupzh&quot;, &quot;PerfCase_rqrmdxdgqv&quot;, &quot;PerfCase_kjtdzfhuse&quot;, &quot;PerfCase_nicbbbnphw&quot;, &quot;PerfCase_dxhvfstzfb&quot;, &quot;PerfCase_qvffjoovik&quot;, &quot;PerfCase_kvpjszraxa&quot;, &quot;PerfCase_yvopwwteuy&quot;, &quot;PerfCase_pbfmzrqobk&quot;, &quot;PerfCase_wprmwacfyn&quot;, &quot;PerfCase_sofwmcotpy&quot;, &quot;PerfCase_rwpfnjxxdv&quot;, &quot;PerfCase_japtdjwvab&quot;, &quot;PerfCase_egfdnjokno&quot;, &quot;PerfCase_odglhbuzsr&quot;, &quot;PerfCase_nsemcvowox&quot;, &quot;PerfCase_ywkgaaoypy&quot;, &quot;PerfCase_nrmbauuvau&quot;, &quot;PerfCase_nayhyukupn&quot;, &quot;PerfCase_pzgoduksej&quot;, &quot;PerfCase_rhvtjzcrhc&quot;, &quot;PerfCase_tbxulknbqg&quot;, &quot;PerfCase_mwepwbcihr&quot;, &quot;PerfCase_kxtbkielkl&quot;, &quot;PerfCase_znfdinmzbi&quot;, &quot;PerfCase_mpkxmtdkfm&quot;, &quot;PerfCase_hmesqdhinh&quot;, &quot;PerfCase_yzzedilzyk&quot;, &quot;PerfCase_fhvwymzyer&quot;, &quot;PerfCase_rgmoxzkvnt&quot;, &quot;PerfCase_acaptuoiyo&quot;, &quot;PerfCase_tslbzwouag&quot;, &quot;PerfCase_qxisgvrrgb&quot;, &quot;PerfCase_gnzszwrlvy&quot;, &quot;PerfCase_ocsnukqamy&quot;, &quot;PerfCase_tbrgpuwbya&quot;, &quot;PerfCase_omunjcelxv&quot;, &quot;PerfCase_aqecrtrxbq&quot;, &quot;PerfCase_cvenryltzx&quot;, &quot;PerfCase_exmrboggnv&quot;, &quot;PerfCase_iybwzrzojp&quot;, &quot;PerfCase_qsolxvgsrz&quot;, &quot;PerfCase_orqauvgbwy&quot;, &quot;PerfCase_dtlfgdswya&quot;, &quot;PerfCase_vlbvqxysdx&quot;, &quot;PerfCase_rykxjdrqgi&quot;, &quot;PerfCase_kjfuqggbsk&quot;, &quot;PerfCase_gumjeyvsoe&quot;, &quot;PerfCase_mobsezgpub&quot;, &quot;PerfCase_ohrmxbssle&quot;, &quot;PerfCase_dlrhvkrsci&quot;, &quot;PerfCase_jgbyhupzpp&quot;, &quot;PerfCase_dhtbqcxpjc&quot;, &quot;PerfCase_xoystgbtqj&quot;, &quot;PerfCase_joqnzorrof&quot;, &quot;PerfCase_zsbitdjgbo&quot;, &quot;PerfCase_psnajgvfxt&quot;, &quot;PerfCase_ceygbjdjul&quot;, &quot;PerfCase_igdacmgfqz&quot;, &quot;PerfCase_iukwoozlrc&quot;, &quot;PerfCase_ivzrdrluou&quot;, &quot;PerfCase_wlqryvewgq&quot;, &quot;PerfCase_iaimpcxafd&quot;, &quot;PerfCase_gadthyhqgg&quot;, &quot;PerfCase_qxoczsitsr&quot;, &quot;PerfCase_rmbxgkgiot&quot;, &quot;PerfCase_orjawzqmjg&quot;, &quot;PerfCase_hetwvmanib&quot;, &quot;PerfCase_zgjfjzcwnn&quot;, &quot;PerfCase_tzzvivzjav&quot;, &quot;PerfCase_ckispkrfoo&quot;, &quot;PerfCase_${v_randomCaseName}&quot;, &quot;PerfCase_oyxxigkjum&quot;, &quot;PerfCase_ndoqimbkqa&quot;, &quot;PerfCase_hnkuwkbkys&quot;, &quot;PerfCase_ejqywcrvsb&quot;, &quot;PerfCase_zfagwluqww&quot;, &quot;PerfCase_yuvdbmzswy&quot;, &quot;PerfCase_mlyorhoopd&quot;, &quot;PerfCase_uzhetavshv&quot;, &quot;PerfCase_tqhajyzsvy&quot;, &quot;PerfCase_lbtuwpzory&quot;, &quot;PerfCase_uzynpivemt&quot;, &quot;PerfCase_peeit &quot;, &quot;PerfCase_cwliojsjrb&quot;, &quot;PerfCase_ovtnlstdzv&quot;, &quot;PerfCase_xfxjrfbeur&quot;, &quot;PerfCase_kzndqgyhlo&quot;, &quot;PerfCase_hfwmazekro&quot;, &quot;PerfCase_ntxjkyuqey&quot;, &quot;PerfCase_gsrnrcbgct&quot;, &quot;PerfCase_jhtwliqnjw&quot;, &quot;PerfCase_phjjocmnjx&quot;, &quot;PerfCase_vblpezsmiy&quot;, &quot;PerfCase_engipgleox&quot;, &quot;PerfCase_yyvojecpyq&quot;, &quot;PerfCase_cijysyeylg&quot;, &quot;PerfCase_upoenfguvk&quot;, &quot;PerfCase_hbsvpafnxe&quot;, &quot;PerfCase_behybefkgo&quot;, &quot;PerfCase_fngvoeiopo&quot;, &quot;PerfCase_ikzvqqgued&quot;, &quot;PerfCase_kecpetoihi&quot;, &quot;PerfCase_xhsox &quot;, &quot;PerfCase_qnvycfsqca&quot;, &quot;PerfCase_fxzxwabxox&quot;, &quot;PerfCase_icdcfgvpnm&quot;, &quot;PerfCase_wgbpnukguc&quot;, &quot;PerfCase_tbmvqdpufl&quot;, &quot;PerfCase_aqfijcyjse&quot;, &quot;PerfCase_ogtyjhnxzn&quot;, &quot;PerfCase_arjxdvlfcw&quot;, &quot;PerfCase_mdijylxukc&quot;, &quot;PerfCase_skxccddmcp&quot;, &quot;PerfCase_otvmlikxsx&quot;, &quot;PerfCase_vcdefvrqax&quot;, &quot;PerfCase_zysnmagcqw&quot;, &quot;PerfCase_spqjobwugk&quot;, &quot;PerfCase_gyhccyscvl&quot;, &quot;PerfCase_kfctnclkel&quot;, &quot;PerfCase_jdjnhlonmw&quot;, &quot;PerfCase_nijfugpmop&quot;, &quot;PerfCase_hayjzmacqc&quot;, &quot;PerfCase_hzorwmfoiy&quot;, &quot;PerfCase_ndkeeteuag&quot;, &quot;PerfCase_tnhfmhksbc&quot;, &quot;PerfCase_shptdsdrnd&quot;, &quot;PerfCase_wqbukantsp&quot;, &quot;PerfCase_njuricehaw&quot;, &quot;PerfCase_ahsnkslkqy&quot;, &quot;PerfCase_wimvctellq&quot;, &quot;PerfCase_bdsxwybail&quot;, &quot;PerfCase_grdowldhwe&quot;, &quot;PerfCase_prpikssxfp&quot;, &quot;PerfCase_qfgydxlidm&quot;, &quot;PerfCase_gbegkkqfes&quot;, &quot;PerfCase_jnewycrmjc&quot;, &quot;PerfCase_wxsfheczrm&quot;, &quot;PerfCase_sooemovqtd&quot;, &quot;PerfCase_bjvjhhzjhn&quot;, &quot;PerfCase_vzrsmsrjjp&quot;, &quot;PerfCase_cshbjcbtna&quot;, &quot;PerfCase_uwifvpfycw&quot;, &quot;PerfCase_qwebzewmfl&quot;, &quot;PerfCase_dzxdgnbthj&quot;, &quot;PerfCase_yqlewwbalo&quot;, &quot;PerfCase_yzjkupwhtt&quot;, &quot;PerfCase_zrfifwmnix&quot;, &quot;PerfCase_zrgvyjqval&quot;, &quot;PerfCase_hnvhynnozm&quot;, &quot;PerfCase_bvxwhdxmmi&quot;, &quot;PerfCase_dpffdupjdd&quot;, &quot;PerfCase_xntgoypyuq&quot;, &quot;PerfCase_wfgswdjaqt&quot;, &quot;PerfCase_thjjucvdyt&quot;, &quot;PerfCase_jpqlcizvuz&quot;, &quot;PerfCase_gqbtlgjguv&quot;, &quot;PerfCase_yicbmkwdxa&quot;, &quot;PerfCase_dtoijohyul&quot;, &quot;PerfCase_ngegasgdub&quot;, &quot;PerfCase_whcqsiysdv&quot;, &quot;PerfCase_enbwfgxfae&quot;, &quot;PerfCase_lwaqx &quot;, &quot;PerfCase_vvpcc &quot;, &quot;PerfCase_mfsdjefnsa&quot;, &quot;PerfCase_enxmojlmom&quot;, &quot;PerfCase_ogrub &quot;, &quot;PerfCase_zvieh &quot;, &quot;PerfCase_orrdz &quot;, &quot;PerfCase_kiimvntkoq&quot;, &quot;PerfCase_dfnbascfjt&quot;, &quot;PerfCase_bqoloxjgmr&quot;, &quot;PerfCase_lvknbtpjkk&quot;, &quot;PerfCase_ejcpbcgaoy&quot;, &quot;PerfCase_kelwxlwmqk&quot;, &quot;PerfCase_wrjujrcwro&quot;, &quot;PerfCase_kxxvctxdhp&quot;, &quot;PerfCase_ngtrxwdukf&quot;, &quot;PerfCase_qmeeqdynxt&quot;, &quot;PerfCase_opuyzkgnhb&quot;, &quot;PerfCase_icdbeqxlsg&quot;, &quot;PerfCase_sbpqcslyes&quot;, &quot;PerfCase_tzaefvjtoh&quot;, &quot;PerfCase_watoritrna&quot;, &quot;PerfCase_corjblmcbf&quot;, &quot;PerfCase_suywmzwfnc&quot;, &quot;PerfCase_vtxaqobhal&quot;, &quot;PerfCase_tbagyeryys&quot;, &quot;PerfCase_satxzmosjx&quot;, &quot;PerfCase_felivlmqxw&quot;, &quot;PerfCase_sspqcyhzbo&quot;, &quot;PerfCase_kbpksssspd&quot;, &quot;PerfCase_fcnkjmezud&quot;, &quot;PerfCase_mewugkrusf&quot;, &quot;PerfCase_bbasisecvb&quot;, &quot;PerfCase_jemixctfel&quot;, &quot;PerfCase_htlwuttjej&quot;, &quot;PerfCase_icrjpatark&quot;, &quot;PerfCase_fyhmlcinpe&quot;, &quot;PerfCase_wwmlxmmmsi&quot;, &quot;PerfCase_btxbacjtmi&quot;, &quot;PerfCase_qhqzidxzng&quot;, &quot;PerfCase_wrbsaqhuuq&quot;, &quot;PerfCase_bfzuoisjxq&quot;, &quot;PerfCase_cumolwnimw&quot;, &quot;PerfCase_mllmnqzigq&quot;, &quot;PerfCase_scmoqaqvyz&quot;, &quot;PerfCase_bqqxafpmjl&quot;, &quot;PerfCase_anexgxdrsk&quot;, &quot;PerfCase_iqmrowzclw&quot;, &quot;PerfCase_imglxekrec&quot;, &quot;PerfCase_zmoohriesv&quot;, &quot;PerfCase_huwykwtclk&quot;, &quot;PerfCase_skwakriqtb&quot;, &quot;PerfCase_ppryexcvbo&quot;, &quot;PerfCase_jmxdoaoekh&quot;, &quot;PerfCase_xblqoaqcja&quot;, &quot;PerfCase_rqvcbnbjww&quot;, &quot;PerfCase_gmtgxnvwfp&quot;, &quot;PerfCase_izyqucdkpu&quot;, &quot;PerfCase_qfqnjqnvfp&quot;, &quot;PerfCase_xritdwtqnd&quot;, &quot;PerfCase_hzuhfnmzep&quot;, &quot;PerfCase_iokqsmhkuc&quot;, &quot;PerfCase_xodotccmbu&quot;, &quot;PerfCase_bdfkawmrsn&quot;, &quot;PerfCase_pxpbwnvunb&quot;, &quot;PerfCase_ivaktemgaf&quot;, &quot;PerfCase_nelizqvlzd&quot;, &quot;PerfCase_zvgeszznih&quot;, &quot;PerfCase_igfcrblwzq&quot;, &quot;PerfCase_bnbjzpzmxf&quot;, &quot;PerfCase_ygwpvgjxsa&quot;, &quot;PerfCase_ljjhyfzbvr&quot;, &quot;PerfCase_nlrglbrrlt&quot;, &quot;PerfCase_msjslovpgb&quot;, &quot;PerfCase_bwtoydgatt&quot;, &quot;PerfCase_dspfwvtbvi&quot;, &quot;PerfCase_mzvponzfic&quot;, &quot;PerfCase_pksfawvtvp&quot;, &quot;PerfCase_bygrvpoxqr&quot;, &quot;PerfCase_yotbcxglij&quot;, &quot;PerfCase_xpyogggyyi&quot;, &quot;PerfCase_fpqofsmkdl&quot;, &quot;PerfCase_cetbdnlhku&quot;, &quot;PerfCase_tjtoitizol&quot;, &quot;PerfCase_isxhblxdpx&quot;, &quot;PerfCase_wcsoevqfym&quot;, &quot;PerfCase_gxllvjsljq&quot;, &quot;PerfCase_cubhxgnkxw&quot;, &quot;PerfCase_vumuwxlmfw&quot;, &quot;PerfCase_bkvgfhhesh&quot;, &quot;PerfCase_hcfbavxdiv&quot;, &quot;PerfCase_haehruujzq&quot;, &quot;PerfCase_wwrvjqptjm&quot;, &quot;PerfCase_zoqegwsihs&quot;, &quot;PerfCase_ybhsmlbmwq&quot;, &quot;PerfCase_vokbxxcosf&quot;, &quot;PerfCase_wcwxzthzdg&quot;, &quot;PerfCase_fnvzatrrfo&quot;, &quot;PerfCase_rhiwguvtxu&quot;, &quot;PerfCase_gtzsfodtyw&quot;, &quot;PerfCase_hgfvbsbkyr&quot;, &quot;PerfCase_jzfhwknfdg&quot;, &quot;PerfCase_cvpcdpbtre&quot;, &quot;PerfCase_hiwgyxtyjr&quot;, &quot;PerfCase_cvabioocqb&quot;, &quot;PerfCase_lrjmmzmrpd&quot;, &quot;PerfCase_zpgkndgqga&quot;, &quot;PerfCase_ryfcivuzqk&quot;, &quot;PerfCase_uvvzcmvluq&quot;, &quot;PerfCase_bzuypfinuy&quot;, &quot;PerfCase_kypcjhjszr&quot;, &quot;PerfCase_vifybpluwf&quot;, &quot;PerfCase_nacbafigoy&quot;, &quot;PerfCase_xvithngdde&quot;, &quot;PerfCase_eplpsjiuhm&quot;, &quot;PerfCase_rxgkkqtqrl&quot;, &quot;PerfCase_ubpzsprbrq&quot;, &quot;PerfCase_xvurrreqlk&quot;, &quot;PerfCase_nmwhnzhnwc&quot;, &quot;PerfCase_annroiakrq&quot;, &quot;PerfCase_ucfoirioio&quot;, &quot;PerfCase_uddfryxnsg&quot;, &quot;PerfCase_qptmvzclml&quot;, &quot;PerfCase_otznoqtmgs&quot;, &quot;PerfCase_xwlbczscdq&quot;, &quot;PerfCase_dajdrhwlhq&quot;, &quot;PerfCase_qlizkrhvin&quot;, &quot;PerfCase_nlhypmddnq&quot;, &quot;PerfCase_yunwvtqzag&quot;, &quot;PerfCase_hubnhhesft&quot;, &quot;PerfCase_bofxcwzqtm&quot;, &quot;PerfCase_cnipexpmpg&quot;, &quot;PerfCase_pjvcdceixt&quot;, &quot;PerfCase_avvhpyujdm&quot;, &quot;PerfCase_nkpdiocwnb&quot;, &quot;PerfCase_bmvuahuwuw&quot;, &quot;PerfCase_gssfxfpmnx&quot;, &quot;PerfCase_qjghjjkqrs&quot;, &quot;PerfCase_xyvolwpduv&quot;, &quot;PerfCase_adefnxgyqw&quot;, &quot;PerfCase_ufacqlvjdx&quot;, &quot;PerfCase_hweijclzta&quot;, &quot;PerfCase_zlfvqldijk&quot;, &quot;PerfCase_tqybiftbco&quot;, &quot;PerfCase_xhdnzyrlnf&quot;, &quot;PerfCase_ljeunjmnfj&quot;, &quot;PerfCase_gyxnquejmy&quot;, &quot;PerfCase_dfathrgxac&quot;, &quot;PerfCase_bmlxucanmh&quot;, &quot;PerfCase_whekywcoop&quot;, &quot;PerfCase_eltzewvjvw&quot;, &quot;PerfCase_wpmhrsswcv&quot;, &quot;PerfCase_ppdxtkokpe&quot;, &quot;PerfCase_gktufkkwpf&quot;, &quot;PerfCase_biodpteibl&quot;, &quot;PerfCase_idpiilvuum&quot;, &quot;PerfCase_zfrcgpyibm&quot;, &quot;PerfCase_dnwigyygzm&quot;, &quot;PerfCase_wbzmvfprmw&quot;, &quot;PerfCase_jyhsvwgegg&quot;, &quot;PerfCase_bcfsmfysmk&quot;, &quot;PerfCase_clusnmzwpo&quot;, &quot;PerfCase_nsvirtfywv&quot;, &quot;PerfCase_yheupqnynn&quot;, &quot;PerfCase_gobsjbslzc&quot;, &quot;PerfCase_rfmgoihtqc&quot;, &quot;PerfCase_qepgnejudj&quot;, &quot;PerfCase_bqnoweurby&quot;, &quot;PerfCase_hgygouxzvv&quot;, &quot;PerfCase_hnkhdwkprd&quot;, &quot;PerfCase_tafdqcabbm&quot;, &quot;PerfCase_baljebddxw&quot;, &quot;PerfCase_sxazaozblj&quot;, &quot;PerfCase_aetydiolgw&quot;, &quot;PerfCase_kvzwxmuoyv&quot;, &quot;PerfCase_xheerhttdc&quot;, &quot;PerfCase_ekgurvuamw&quot;, &quot;PerfCase_bniqaufamw&quot;, &quot;PerfCase_sxlwswynpm&quot;, &quot;PerfCase_vbizisyxre&quot;, &quot;PerfCase_tmbsjqzkqi&quot;, &quot;PerfCase_wzwaraepdq&quot;, &quot;PerfCase_ubzljniwne&quot;, &quot;PerfCase_nqtsxkjuqp&quot;, &quot;PerfCase_wommuritsp&quot;, &quot;PerfCase_mwubxzrela&quot;, &quot;PerfCase_txoaouqmix&quot;, &quot;PerfCase_jvtbjtbgpn&quot;, &quot;PerfCase_hadgqwlxaj&quot;, &quot;PerfCase_ivixrsdcgz&quot;, &quot;PerfCase_cbphggwply&quot;, &quot;PerfCase_unskervhlo&quot;, &quot;PerfCase_anwgmkhzuz&quot;, &quot;PerfCase_mfevnardmy&quot;, &quot;PerfCase_ymaqyfblmb&quot;, &quot;PerfCase_clqffjnhhr&quot;, &quot;PerfCase_ogpgrcsexo&quot;, &quot;PerfCase_htkughmwzs&quot;, &quot;PerfCase_zhrrauvqps&quot;, &quot;PerfCase_iodwbmhxkv&quot;, &quot;PerfCase_jyxiupized&quot;, &quot;PerfCase_zyjsnoxpem&quot;, &quot;PerfCase_gfkwarlzhw&quot;, &quot;PerfCase_fihduipjhg&quot;, &quot;PerfCase_gmkajkscqv&quot;, &quot;PerfCase_cvxxqupwrw&quot;, &quot;PerfCase_lmhitpzjga&quot;, &quot;PerfCase_vpniylwwms&quot;, &quot;PerfCase_kavvxnvqsn&quot;, &quot;PerfCase_zgwqksjrhu&quot;, &quot;PerfCase_clyhjxqjha&quot;, &quot;PerfCase_urhunjxuqk&quot;, &quot;PerfCase_eikjrhajhy&quot;, &quot;PerfCase_czpaecoqxg&quot;, &quot;PerfCase_jwhthkzmce&quot;, &quot;PerfCase_joqjlsyred&quot;, &quot;PerfCase_xrvdcmlfba&quot;, &quot;PerfCase_kouetqstdv&quot;, &quot;PerfCase_wnckrvabjx&quot;, &quot;PerfCase_kqnhwkwibj&quot;, &quot;PerfCase_rraxgeglzw&quot;, &quot;PerfCase_wmiurauxip&quot;, &quot;PerfCase_wcxjhoyfsx&quot;, &quot;PerfCase_ybegvenshk&quot;, &quot;PerfCase_wzoppnfffw&quot;, &quot;PerfCase_yzmatkldym&quot;, &quot;PerfCase_mjjzqrcxtk&quot;, &quot;PerfCase_zukdeosniq&quot;, &quot;PerfCase_bwmbllfkck&quot;, &quot;PerfCase_ipgexexhzx&quot;, &quot;PerfCase_orxhvrgsrg&quot;, &quot;PerfCase_rnchvxkwpa&quot;, &quot;PerfCase_sldrcckktc&quot;, &quot;PerfCase_whxqvgpmdo&quot;, &quot;PerfCase_pmugcnehsf&quot;, &quot;PerfCase_luwzuctayg&quot;, &quot;PerfCase_gfszqftzvf&quot;, &quot;PerfCase_bhaxwpbtns&quot;, &quot;PerfCase_scwkfftpei&quot;, &quot;PerfCase_gmysjqosbc&quot;, &quot;PerfCase_ebulcskdyq&quot;, &quot;PerfCase_bgagaldoil&quot;, &quot;PerfCase_mpebntxtmw&quot;, &quot;PerfCase_qxiwvljfqh&quot;, &quot;PerfCase_zaftbnbswd&quot;, &quot;PerfCase_tnflbdvetw&quot;, &quot;PerfCase_idiocubdrw&quot;, &quot;PerfCase_oyqnqpzhrx&quot;, &quot;PerfCase_gzxcsgysro&quot;, &quot;PerfCase_mybkdrzwba&quot;, &quot;PerfCase_snlvnoulhn&quot;, &quot;PerfCase_pwnodqyqwa&quot;, &quot;PerfCase_oomhdgbjzd&quot;, &quot;PerfCase_lwghagygzh&quot;, &quot;PerfCase_bmwjnqveng&quot;, &quot;PerfCase_agrvbayxhc&quot;, &quot;PerfCase_angvbciota&quot;, &quot;PerfCase_skxeocitsi&quot;, &quot;PerfCase_ujyfovyxqz&quot;, &quot;PerfCase_miqsuzuoum&quot;, &quot;PerfCase_rappiyqcag&quot;, &quot;PerfCase_lrfvklxnld&quot;, &quot;PerfCase_bxrugmadim&quot;, &quot;PerfCase_mocdncfhqn&quot;, &quot;PerfCase_giejayqico&quot;, &quot;PerfCase_tbodskxxcs&quot;, &quot;PerfCase_elpdtzvasf&quot;, &quot;PerfCase_fyyvzidcbo&quot;, &quot;PerfCase_xmntwcfuqu&quot;, &quot;PerfCase_xhdjytevvo&quot;, &quot;PerfCase_lsutoslqvq&quot;, &quot;PerfCase_epswlnhzzn&quot;, &quot;PerfCase_mkuquekidh&quot;, &quot;PerfCase_uhpolburla&quot;, &quot;PerfCase_bwvhiwuqpd&quot;, &quot;PerfCase_pjkyjwpdtp&quot;, &quot;PerfCase_iroivfbjat&quot;, &quot;PerfCase_fijnesfwcg&quot;, &quot;PerfCase_mzvjgbqxgc&quot;, &quot;PerfCase_piqpnfyaij&quot;, &quot;PerfCase_mbbmbkccdm&quot;, &quot;PerfCase_gldtwvuvmm&quot;, &quot;PerfCase_abkngydrei&quot;, &quot;PerfCase_ibthrmlbwd&quot;, &quot;PerfCase_zqigufzdjz&quot;, &quot;PerfCase_wmemeuhlkf&quot;, &quot;PerfCase_ztgtexyenm&quot;, &quot;PerfCase_tqtvobocbr&quot;, &quot;PerfCase_knglmptxja&quot;, &quot;PerfCase_blseyesyeo&quot;, &quot;PerfCase_usdjcnpymh&quot;, &quot;PerfCase_ipqngiidnk&quot;, &quot;PerfCase_ctxtreyoko&quot;, &quot;PerfCase_cvveavrvtv&quot;, &quot;PerfCase_kzzfqcgilc&quot;]  }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="HTTPArgument.content_type">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">audios</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Content-Disposition: form-data; name=&quot;transcript&quot;; filename=&quot;SampleDoc.docx&quot; </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${ex_accessToken}</stringProp>
              </elementProp>
              <elementProp name="x-dtpc" elementType="Header">
                <stringProp name="Header.name">x-dtpc</stringProp>
                <stringProp name="Header.value">4$261474838_978h17vTCFUIAKFURHHRNPPCOHSKQRRHRBMNCRU-0e0</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Darts - Api - POST - Audio - Created ${audioCounter} - 336mb" enabled="false">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${TEST_DATA}${FILE_TO_UPLOAD336mb}" elementType="HTTPFileArg">
                <stringProp name="File.path">${TEST_DATA}${FILE_TO_UPLOAD336mb}</stringProp>
                <stringProp name="File.paramname">file</stringProp>
                <stringProp name="File.mimetype">audio/mpeg</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="metadata" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">metadata</stringProp>
                <stringProp name="Argument.value"> {    &quot;started_at&quot;: &quot;${v_audiodates}&quot;,    &quot;ended_at&quot;: &quot;${v_audiodates1hour}&quot;,    &quot;channel&quot;: ${audioCounter},    &quot;total_channels&quot;: 4,    &quot;format&quot;: &quot;mp2&quot;,    &quot;filename&quot;: &quot;24h.mp2&quot;,    &quot;courthouse&quot;: &quot;PerfCourtHouse01&quot;,    &quot;courtroom&quot;: &quot;PerfCourtroom01&quot;,    &quot;file_size&quot;: 335,919,    &quot;checksum&quot;: &quot;TVRMwq16b4mcZwPSlZj/iQ==&quot;,    &quot;cases&quot;: [      &quot;PerfCase_${v_randomCaseName}&quot;    ]  }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="HTTPArgument.content_type">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">audios</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${ex_accessToken}</stringProp>
              </elementProp>
              <elementProp name="x-dtpc" elementType="Header">
                <stringProp name="Header.name">x-dtpc</stringProp>
                <stringProp name="Header.value">4$261474838_978h17vTCFUIAKFURHHRNPPCOHSKQRRHRBMNCRU-0e0</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DARTS - Api - POST - Cases" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;courthouse&quot;: &quot;PerfCourtHouse01&quot;,&#xd;
  &quot;case_number&quot;: &quot;PerfCase_${v_randomCaseName}&quot;,&#xd;
  &quot;defendants&quot;: [&#xd;
    &quot;Mr ${v_randomDefender} Defender&quot;&#xd;
  ],&#xd;
  &quot;judges&quot;: [&#xd;
    &quot;Mr ${v_randomJudge} Judge&quot;&#xd;
  ],&#xd;
  &quot;prosecutors&quot;: [&#xd;
    &quot;Mr ${v_randomProsecutor} Prosecutor&quot;&#xd;
  ],&#xd;
  &quot;defenders&quot;: [&#xd;
    &quot;Mr ${v_randomDefender2} Defender&quot;&#xd;
  ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">cases</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">52250</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Host" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${BASE_URL}</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">229</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua</stringProp>
                <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;118&quot;, &quot;Google Chrome&quot;;v=&quot;118&quot;, &quot;Not=A?Brand&quot;;v=&quot;99&quot;</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-mobile" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                <stringProp name="Header.value">?0</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${ex_accessToken}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="x-dtpc" elementType="Header">
                <stringProp name="Header.name">x-dtpc</stringProp>
                <stringProp name="Header.value">2$330465252_337h15vSOMTMEHVGASGTMKRLHPAHVVJKKRKOMRL-0e0</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-platform" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://${BASE_URL}</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${BASE_URL}/swagger-ui/index.html</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="RandomTimer.range">0.0</stringProp>
            <stringProp name="ConstantTimer.delay">0.0</stringProp>
          </UniformRandomTimer>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Created Case Id" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">ex_caseId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.case_id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Created Case Name" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">ex_getCaseName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.case_number</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert &apos;Check Case Id - ${ex_caseId} has been created with Name ${ex_getCaseName}" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1715734400">&quot;case_id&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">Assert &apos;Check Cases Id:&apos; - ${ex_empty} - No Results have been found.</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
